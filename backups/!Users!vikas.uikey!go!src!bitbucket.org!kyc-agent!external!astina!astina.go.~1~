package astina

import (
	"fmt"

	"bitbucket.org/kyc-agent/common/http_client"
	"bitbucket.org/kyc-agent/common/logger"
	"bitbucket.org/kyc-agent/common/utils/hmac"
	"bitbucket.org/kyc-agent/external"
	"net/http"
)

// astina search customer by phone api client
func searchCustomerByPhone(req *SearchCustomerByPhoneRequest, requestID string) (*Customer, *AstinaSDKError) {
	logger.Info(logSearchCustomerByPhone, "Sending request to astina requestID: %s, request:%+v", requestID, req)

	customer := &Customer{}
	var statusCode int
	var err error
	var resp interface{}

	//generate hmac
	hmacCode := hmac.Generate()

	httpRequest := http_client.New()
	httpRequest.SetUrl(customerSearchUrl).SetHeader("Content-Type", "application/json").SetHeader("random", hmacCode.Random).
		SetHeader("app-id", hmacCode.AppID).SetHeader("hmac", hmacCode.Token).SetMethod(http_client.POST).
		SetRequestBodyParams(req).SetResponseOK(customer)

	statusCode, resp, err = astinaHttpClient.Request(&httpRequest)

	logger.Info(logSearchCustomerByPhone, "astina search customer request completed", statusCode, resp, err)
	switch response := resp.(type) {
	case *Customer:
		logger.Info(logSearchCustomerByPhone, "Received response from astina for requestID: %s Statuscode: %d", requestID, statusCode)
		return response, nil
	default:
		if err != nil && statusCode == 0 {
			logger.Error(logSearchCustomerByPhone, "Error occurred while fetching data from astina for requestID: %s Statuscode: %d, error: %v",
				requestID, statusCode, err)
			return nil, &AstinaSDKError{Code: external.PreRequestProcessingError, Message: err.Error(), StatusCode: http.StatusInternalServerError}
		} else if err != nil {
			logger.Error(logSearchCustomerByPhone, "Error occurred while fetching data from astina for requestID: %s Statuscode: %d, error: %v, resp: %+v",
				requestID, statusCode, err, resp)
			return nil, &AstinaSDKError{Code: external.HttpRequestError, Message: err.Error(), StatusCode: statusCode}
		} else {
			logger.Error(logSearchCustomerByPhone, fmt.Sprintf("Response: %+v", resp))
			return nil, &AstinaSDKError{Code: external.UnknownError, Message: "Something went wrong", StatusCode: statusCode}
		}
	}
}
