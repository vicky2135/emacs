package session

import (
	"bitbucket.org/kyc-agent/common/redis"
	"github.com/gin-contrib/sessions"
	goginredis "github.com/gin-contrib/sessions/redis"
)

type CookieConfig struct {
	CookieKey      string `json:"cookie_key"`
	CookiePath     string `json:"cookie_path"`
	CookieMaxAge   int    `json:"cookie_max_age"`
	CookieSecure   bool   `json:"cookie_secure"`
	CookieHTTPOnly bool   `json:"cookie_http_only"`
	SessionName    string `json:"session_name"`
}

var cookieConfig *CookieConfig
var sessionStore sessions.Store

func GetSessionStore() sessions.Store {
	return sessionStore
}

func GetSessionConfig() *CookieConfig {
	return cookieConfig
}

func Initialize(config *CookieConfig) {

	cookieConfig = &CookieConfig{
		CookieKey:      config.CookieKey,
		CookiePath:     config.CookiePath,
		CookieMaxAge:   config.CookieMaxAge,
		CookieSecure:   config.CookieSecure,
		CookieHTTPOnly: config.CookieHTTPOnly,
		SessionName:    config.SessionName,
	}

	createSessionStore()
}

func createSessionStore() {
	pool := redis.GetRedisPool()
	var storeErr error
	sessionStore, storeErr = goginredis.NewStoreWithPool(pool, []byte(cookieConfig.CookieKey))

	if storeErr != nil {
		panic("Error Creating Session Store err: " + storeErr.Error())
	}
	sessionStore.Options(sessions.Options{
		Path:     cookieConfig.CookiePath,
		MaxAge:   cookieConfig.CookieMaxAge,
		Secure:   cookieConfig.CookieSecure,
		HttpOnly: cookieConfig.CookieHTTPOnly,
	})

}
