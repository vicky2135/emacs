package customer

import (
	"fmt"

	"bitbucket.org/kyc-agent/common/logger"
	"bitbucket.org/kyc-agent/config"
	"bitbucket.org/kyc-agent/dto"
	"bitbucket.org/kyc-agent/exceptions"
	"bitbucket.org/kyc-agent/external/bounty_hunter"
	"bitbucket.org/kyc-agent/external/phantom"
	"bitbucket.org/kyc-agent/logic/customer/utils"
	"github.com/gin-contrib/sessions"
	"github.com/gin-gonic/gin"
)

const (
	uploadDocsLogTag              = "logic:customer:uploadDocs"
	upgradeAccountToSavingsLogTag = "logic:customer:upgradeAccounttosavings"
	upadteAgentSavingsKycLogTag   = "logic:customer:upgradeAccountToSavings"
	Nationality                   = "Y"
	IndonesiaCountryPrefixCode    = "ID"
	Addresstype                   = "5"
	Estimatedtotaldebetamt        = "2"
	Estimatedtotalcreditamt       = "2"
)

type SavingsKyc interface {
	UploadZippedDocs(requestId string, request *dto.ClubKycRequest) *exceptions.ErrorResponse
	UpgradeToSavings(requestId string, request *dto.ClubKycRequest, astinaCache *utils.AstinaCache) *exceptions.ErrorResponse
	FinishSavingsKyc(ctx *gin.Context, requestId string, request *dto.ClubKycRequest, astinaCache *utils.AstinaCache) *exceptions.ErrorResponse
}

// uploading documets
func uploadDocs(requestId string, request *dto.ClubKycRequest) *exceptions.ErrorResponse {

	// uploading docs to falcon
	logger.Info(uploadDocsLogTag, fmt.Sprintf("uploading docs to falcon initiated, requestId:%s", requestId))

	docs := []docsImage{}

	if len(request.IDCardPictureBase64) > 0 {
		docs = append(docs, docsImage{fileName: ktpImageName, file: request.IDCardPictureBase64})
	}

	if len(request.NPWPPictureBase64) > 0 {
		docs = append(docs, docsImage{fileName: npwpImageName, file: request.NPWPPictureBase64})
	}

	if len(request.SelfiePictureBase64) > 0 {
		docs = append(docs, docsImage{fileName: selfieImageName, file: request.SelfiePictureBase64})
	}

	if len(request.SignPictureBase64) > 0 {
		docs = append(docs, docsImage{fileName: signImageName, file: request.SignPictureBase64})
	}

	err := uploadZippedPictures(request.OVOID, docs, requestId)

	logger.Info(uploadDocsLogTag, fmt.Sprintf("uploading docs to falcon finished, requestId:%s", requestId))
	return err
}

// function to update customer account to savings by uploading data to phantom
func upgradeAccountToSavings(requestId string, request *dto.ClubKycRequest, astinaCache *utils.AstinaCache) *exceptions.ErrorResponse {

	logger.Info(upgradeAccountToSavingsLogTag, fmt.Sprintf("start to save customer data to phantom, requestId:%s", requestId))

	// fetch activated email for customer
	emailAddress := fetchEmail(astinaCache.EmailIDs)

	phantomData := &phantom.SaveCustomerDataRequest{
		Ovoid:                   request.OVOID,
		Branchcodeopening:       request.BranchCodeOpening,
		Customername:            request.CustomerName,
		Customernickname:        request.CustomerName,
		Npwp:                    request.NPWPNumber,
		Phoneno:                 astinaCache.Mobile,
		Bupro:                   config.Config.Phantom.Bupro,
		Income:                  request.IncomeSource,
		Sex:                     request.Sex,
		Bigp:                    config.Config.Phantom.Bigp,
		Bornplace:               request.Birthplace,
		Borndate:                request.BirthdayString,
		Mothername:              request.MotherMaidenName,
		Ktpnumber:               request.IDCardNumber,
		Nationality:             Nationality,
		Countrycode:             IndonesiaCountryPrefixCode,
		Kimsno:                  config.Config.Phantom.KIMSNo,
		Religion:                request.Religion,
		Job:                     request.WorkTitle,
		Maritalstatus:           request.MarriageStatus,
		Bupkr:                   request.WorkField,
		Ktpaddress:              request.Address,
		Ktpcity:                 request.City,
		Ktpstate:                request.Province,
		Ktpkecamatan:            request.District,
		Ktpkelurahan:            request.Village,
		Locationcodebi:          request.LocationCode,
		Homeownership:           true,
		Addresstype:             Addresstype,
		Email:                   emailAddress,
		Ktprt:                   request.RTNumber,
		Ktprw:                   request.RWNumber,
		Sourceoffunding:         request.IncomeSource,
		Purposeoffund:           request.AccountPurpose,
		Estimateddebetamt:       request.ExpenseMonthly,
		Estimatedcreditamt:      request.IncomeMonthlyRange,
		Estimatedtotaldebetamt:  Estimatedtotaldebetamt,
		Estimatedtotalcreditamt: Estimatedtotalcreditamt,
		Idexpireddate:           request.IDCardExpiryDate,
	}

	// passing request to phantom to update
	err := phantom.SaveCustomerData(phantomData, requestId)
	if err != nil {
		return exceptions.TransformSDKErrorToKYCError(err)
	}

	logger.Info(upgradeAccountToSavingsLogTag, fmt.Sprintf("successfully uploaded data to phantom, requestId:%s", requestId), fmt.Sprintf("%+v", phantomData))
	return nil
}

func updateAgentReportForSavingsKyc(ctx *gin.Context, requestId string, request *dto.ClubKycRequest, astinaCache *utils.AstinaCache) *exceptions.ErrorResponse {

	logger.Info(upadteAgentSavingsKycLogTag, fmt.Sprintf("updating agent report for successful savings update of customer kyc: %s", requestId))
	agentReportUpdateErr := &exceptions.ErrorResponse{}

	// fetch agentId from session data
	agentID, ok := sessions.Default(ctx).Get("id").(string)
	if !ok {
		logger.Info(upadteAgentSavingsKycLogTag, "error fetching agent id")
		agentReportUpdateErr.Build(exceptions.SessionReadErrCode)
		return agentReportUpdateErr
	}

	// fetch agentName from session data
	agentName, ok := sessions.Default(ctx).Get("name").(string)
	if !ok {
		logger.Info(upadteAgentSavingsKycLogTag, fmt.Sprintf("error fetching agent name, requestId:%s", requestId))
		agentReportUpdateErr.Build(exceptions.SessionReadErrCode)
		return agentReportUpdateErr
	}

	// fetch active email for customer
	customerEmail := fetchEmail(astinaCache.EmailIDs)

	// prepare bounty_hunter request object
	agentReport := &bounty_hunter.AgentReport{
		Mobile:       astinaCache.Mobile,
		Email:        customerEmail,
		CustomerName: request.CustomerName,
		OvoId:        request.OVOID,
		BankerName:   agentName,
		BankerId:     agentID,
		Status:       "SAVING_REGISTER_COMPLETED",
		Reason:       "SUCCESS",
	}

	// pass request to bounty hunter sdk to update agent report for premier kyc
	_, Bherr := bounty_hunter.UpdateAgentReport(agentReport, requestId)
	if Bherr != nil {
		return exceptions.TransformSDKErrorToKYCError(Bherr)
	}

	logger.Info(upadteAgentSavingsKycLogTag, fmt.Sprintf("successfully updated agent report in bounty hunter for requestId: %s", requestId))
	return nil
}
