"b73ea9e5163caa338cd9aca56abaee0178655337"
[cl-struct-undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#3=[nil nil ((#("	\"log\"
" 0 1 (fontified t face whitespace-tab) 1 6 (fontified t face font-lock-string-face) 6 7 (fontified t)) . -32) 342) nil (23303 47339 756016 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -342) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) 343) nil (23303 47339 756067 0) 0 nil]) ((#("	log.Println(\"----------------------------------------------------------------------------------------------------\", err)" 0 1 (fontified t face whitespace-tab) 1 5 (fontified t) 5 12 (fontified t face font-lock-function-name-face) 12 13 (fontified t) 13 77 (fontified t face font-lock-string-face) 77 115 (fontified t face (-1 font-lock-string-face)) 115 121 (fontified t face (-1))) . 343) (undo-tree-id170 . -121) (undo-tree-id171 . -121) (undo-tree-id172 . -121) (undo-tree-id173 . -121) (undo-tree-id174 . -121) (t 23303 47221 380787 903000)) nil (23303 47339 756120 0) 0 nil] [nil nil ((466 . 467) (#("	" 0 1 (fontified nil face whitespace-tab)) . 465) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (464 . 467) (t 23303 47221 380787 903000)) ((#("
	
" 0 1 (fontified t) 1 2 (fontified nil face whitespace-tab) 2 3 (fontified nil)) . 464) (undo-tree-id150 . -3) (undo-tree-id151 . 3) (undo-tree-id152 . -2) (undo-tree-id153 . 1) (undo-tree-id154 . -3) (undo-tree-id155 . -3) (undo-tree-id156 . -3) (465 . 466) (#("	" 0 1 (fontified t face whitespace-tab)) . 466) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1)) (23303 47226 797893 0) 0 nil]) ((343 . 465) (#("	log.Println (\"----------------------------------------------------------------------------------------------------\", err)
" 0 1 (fontified t face whitespace-tab) 1 5 (fontified t) 5 12 (fontified t face font-lock-function-name-face) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t face font-lock-string-face) 15 77 (fontified t face font-lock-string-face) 77 115 (fontified t face #2=(-1 font-lock-string-face)) 115 116 (fontified t face #2#) 116 118 (fontified t face #1=(-1)) 118 121 (fontified t face #1#) 121 122 (fontified t face #1#) 122 123 (fontified t)) . -343) (undo-tree-id105 . -122) (undo-tree-id106 . -118) (undo-tree-id107 . -118) (undo-tree-id108 . -118) (undo-tree-id109 . -121) (undo-tree-id110 . 2) (undo-tree-id111 . -122) (undo-tree-id112 . 110) (undo-tree-id113 . -14) (undo-tree-id114 . -122) (undo-tree-id115 . -122) (32 . 39) 458) nil (23303 47226 798342 0) 0 nil]) ((454 . 457) (#("er" 0 2 (fontified t face (-1))) . -454) (undo-tree-id116 . -2) (undo-tree-id117 . 2) (undo-tree-id118 . -1) (undo-tree-id119 . -2) 456) nil (23303 47221 373767 0) 0 nil]) ((452 . 456)) nil (23303 47221 373772 0) 0 nil]) ((351 . 451)) nil (23303 47221 373776 0) 0 nil]) ((350 . 352) (#("\"" 0 1 (fontified nil)) . -350) (350 . 351) (349 . 351) (#("(" 0 1 (fontified nil)) . -349) (348 . 350)) nil (23303 47221 373784 0) 0 nil]) ((341 . 348) (#("Printl" 0 6 (fontified t)) . -341) (undo-tree-id120 . -6) 347) nil (23303 47221 373800 0) 0 nil]) ((346 . 347)) nil (23303 47221 373804 0) 0 nil]) ((#("L" 0 1 (fontified t)) . -346) (undo-tree-id121 . -1) 347) nil (23303 47221 373809 0) 0 nil]) ((346 . 347)) nil (23303 47221 373812 0) 0 nil]) ((#("l" 0 1 (fontified t)) . -346) (undo-tree-id122 . -1) 347) nil (23303 47221 373819 0) 0 nil]) ((337 . 347)) nil (23303 47221 373823 0) 0 nil]) ((336 . 337)) nil (23303 47221 373827 0) 0 nil]) ((#("	logger.Inof" 0 1 (fontified t face whitespace-tab) 1 12 (fontified t)) . 336) (undo-tree-id123 . -12) (undo-tree-id124 . -12) (undo-tree-id125 . -12)) nil (23303 47221 373836 0) 0 nil]) ((345 . 348)) nil (23303 47221 373839 0) 0 nil]) ((#("f" 0 1 (fontified t)) . -345) (undo-tree-id126 . -1) 346) nil (23303 47221 373849 0) 0 nil]) ((345 . 346)) nil (23303 47221 373852 0) 0 nil]) ((#("N" 0 1 (fontified t)) . -345) (undo-tree-id127 . -1) (#("f" 0 1 (fontified t)) . -346) (undo-tree-id128 . -1) (#("o" 0 1 (fontified t)) . -347) (undo-tree-id129 . -1) 348) nil (23303 47221 373867 0) 0 nil]) ((337 . 348)) nil (23303 47221 373871 0) 0 nil]) ((335 . 337) (t 23301 17879 35405 684000)) nil (23303 47221 373875 0) 0 nil]) ((32 . 2012) ("	\"github.com/chasex/redis-go-cluster\"
)

func Ping() error {
	_, err := redis.String(clusterConn.Do(\"PING\"))
	if err != nil {
		return fmt.Errorf(\"cannot 'PING' db: %v\", err)
	}
	return nil
}

func Get(key string) ([]byte, error) {
	var data []byte
	data, err := redis.Bytes(clusterConn.Do(\"GET\", key))
	if err != nil {
		return data, fmt.Errorf(\"error getting key %s: %v\", key, err)
	}
	return data, err
}

func Set(key string, value []byte) error {
	_, err := clusterConn.Do(\"SET\", key, value)
	if err != nil {
		v := string(value)
		if len(v) > 15 {
			v = v[0:12] + \"...\"
		}
		return fmt.Errorf(\"error setting key %s to %s: %v\", key, v, err)
	}
	return err
}

func Exists(key string) (bool, error) {
	ok, err := redis.Bool(clusterConn.Do(\"EXISTS\", key))
	if err != nil {
		return ok, fmt.Errorf(\"error checking if key %s exists: %v\", key, err)
	}
	return ok, err
}

func Delete(key string) error {
	_, err := clusterConn.Do(\"DEL\", key)
	return err
}

func GetKeys(pattern string) ([]string, error) {
	iter := 0
	keys := []string{}
	for {
		arr, err := redis.Values(clusterConn.Do(\"SCAN\", iter, \"MATCH\", pattern))
		if err != nil {
			return keys, fmt.Errorf(\"error retrieving '%s' keys\", pattern)
		}

		iter, _ = redis.Int(arr[0], nil)
		k, _ := redis.Strings(arr[1], nil)
		keys = append(keys, k...)

		if iter == 0 {
			break
		}
	}

	return keys, nil
}

func Incr(counterKey string) (int, error) {
	return redis.Int(clusterConn.Do(\"INCR\", counterKey))
}

func HSET(key, field string, value []byte) error {
	_, err := clusterConn.Do(\"HSET\", key, field, value)

	if nil != err {
		v := string(value)
		if len(v) > 15 {
			v = v[0:12] + \"...\"
		}
		return fmt.Errorf(\"error setting key %s to %s: %v" . 32) (t 23301 17537 347181 79000)) nil (23303 47221 373878 0) 0 nil]) ((32 . 1736) ("
	\"github.com/chasex/redis-go-cluster\"
)

func Ping() error {
	_, err := redis.String(clusterConn.Do(\"PING\"))
	if err != nil {
		return fmt.Errorf(\"cannot 'PING' db: %v\", err)
	}
	return nil
}

func Get(key string) ([]byte, error) {
	var data []byte
	data, err := redis.Bytes(clusterConn.Do(\"GET\", key))
	if err != nil {
		return data, fmt.Errorf(\"error getting key %s: %v\", key, err)
	}
	return data, err
}

func Set(key string, value []byte) error {
	_, err := clusterConn.Do(\"SET\", key, value)
	if err != nil {
		v := string(value)
		if len(v) > 15 {
			v = v[0:12] + \"...\"
		}
		return fmt.Errorf(\"error setting key %s to %s: %v\", key, v, err)
	}
	return err
}

func SetEx(key string, age int64, value []byte) error {
	_, err := clusterConn.Do(\"SETEX\", key, age, value)

	if err != nil {
		v := string(value)
		if len(v) > 15 {
			v = v[0:12] + \"...\"
		}
		return fmt.Errorf(\"error setting key %s to %s: %v\", key, v, err)
	}
	return err
}

func Exists(key string) (bool, error) {
	ok, err := redis.Bool(clusterConn.Do(\"EXISTS\", key))
	if err != nil {
		return ok, fmt.Errorf(\"error checking if key %s exists: %v\", key, err)
	}
	return ok, err
}

func Delete(key string) error {
	_, err := clusterConn.Do(\"DEL\", key)
	return err
}

func GetKeys(pattern string) ([]string, error) {
	iter := 0
	keys := []string{}
	for {
		arr, err := redis.Values(clusterConn.Do(\"SCAN\", iter, \"MATCH\", pattern))
		if err != nil {
			return keys, fmt.Errorf(\"error retrieving '%s' keys\", pattern)
		}

		iter, _ = redis.Int(arr[0], nil)
		k, _ := redis.Strings(arr[1], nil)
		keys = append(keys, k...)

		if iter == 0 {
			break
		}
	}

	return keys, nil
}

func Incr(counterKey string) (int, error) {
	return redis.Int(clusterConn.Do(\"INCR\", counterKey))
}

func HSET(key, field string, value []byte) error {
	_, err := clusterConn.Do(\"HSET\", key, field, value)

	if nil != err {
		v := string(value)
		if len(v) > 15 {
			v = v[0:12] + \"...\"
		}
		return fmt.Errorf(\"error setting key %s to %s:" . 32) (t 23301 17024 389412 87000)) nil (23303 47221 373885 0) 0 nil]) ((32 . 2012) ("	\"github.com/chasex/redis-go-cluster\"
)

func Ping() error {
	_, err := redis.String(clusterConn.Do(\"PING\"))
	if err != nil {
		return fmt.Errorf(\"cannot 'PING' db: %v\", err)
	}
	return nil
}

func Get(key string) ([]byte, error) {
	var data []byte
	data, err := redis.Bytes(clusterConn.Do(\"GET\", key))
	if err != nil {
		return data, fmt.Errorf(\"error getting key %s: %v\", key, err)
	}
	return data, err
}

func Set(key string, value []byte) error {
	_, err := clusterConn.Do(\"SET\", key, value)
	if err != nil {
		v := string(value)
		if len(v) > 15 {
			v = v[0:12] + \"...\"
		}
		return fmt.Errorf(\"error setting key %s to %s: %v\", key, v, err)
	}
	return err
}

func Exists(key string) (bool, error) {
	ok, err := redis.Bool(clusterConn.Do(\"EXISTS\", key))
	if err != nil {
		return ok, fmt.Errorf(\"error checking if key %s exists: %v\", key, err)
	}
	return ok, err
}

func Delete(key string) error {
	_, err := clusterConn.Do(\"DEL\", key)
	return err
}

func GetKeys(pattern string) ([]string, error) {
	iter := 0
	keys := []string{}
	for {
		arr, err := redis.Values(clusterConn.Do(\"SCAN\", iter, \"MATCH\", pattern))
		if err != nil {
			return keys, fmt.Errorf(\"error retrieving '%s' keys\", pattern)
		}

		iter, _ = redis.Int(arr[0], nil)
		k, _ := redis.Strings(arr[1], nil)
		keys = append(keys, k...)

		if iter == 0 {
			break
		}
	}

	return keys, nil
}

func Incr(counterKey string) (int, error) {
	return redis.Int(clusterConn.Do(\"INCR\", counterKey))
}

func HSET(key, field string, value []byte) error {
	_, err := clusterConn.Do(\"HSET\", key, field, value)

	if nil != err {
		v := string(value)
		if len(v) > 15 {
			v = v[0:12] + \"...\"
		}
		return fmt.Errorf(\"error setting key %s to %s: %v" . 32) (t 23301 16936 706702 658000)) nil (23303 47221 373889 0) 0 nil]) ((32 . 1736) (#("
	\"github.com/chasex/redis-go-cluster\"
)

func Ping() error {
	_, err := redis.String(clusterConn.Do(\"PING\"))
	if err != nil {
		return fmt.Errorf(\"cannot 'PING' db: %v\", err)
	}
	return nil
}

func Get(key string) ([]byte, error) {
	var data []byte
	data, err := redis.Bytes(clusterConn.Do(\"GET\", key))
	if err != nil {
		return data, fmt.Errorf(\"error getting key %s: %v\", key, err)
	}
	return data, err
}

func Set(key string, value []byte) error {
	_, err := clusterConn.Do(\"SET\", key, value)
	if err != nil {
		v := string(value)
		if len(v) > 15 {
			v = v[0:12] + \"...\"
		}
		return fmt.Errorf(\"error setting key %s to %s: %v\", key, v, err)
	}
	return err
}

func SetEx(key string, age int64, value []byte) error {
	_, err := clusterConn.Do(\"SETEX\", key, age, value)

	if err != nil {
		v := string(value)
		if len(v) > 15 {
			v = v[0:12] + \"...\"
		}
		return fmt.Errorf(\"error setting key %s to %s: %v\", key, v, err)
	}
	return err
}

func Exists(key string) (bool, error) {
	ok, err := redis.Bool(clusterConn.Do(\"EXISTS\", key))
	if err != nil {
		return ok, fmt.Errorf(\"error checking if key %s exists: %v\", key, err)
	}
	return ok, err
}

func Delete(key string) error {
	_, err := clusterConn.Do(\"DEL\", key)
	return err
}

func GetKeys(pattern string) ([]string, error) {
	iter := 0
	keys := []string{}
	for {
		arr, err := redis.Values(clusterConn.Do(\"SCAN\", iter, \"MATCH\", pattern))
		if err != nil {
			return keys, fmt.Errorf(\"error retrieving '%s' keys\", pattern)
		}

		iter, _ = redis.Int(arr[0], nil)
		k, _ := redis.Strings(arr[1], nil)
		keys = append(keys, k...)

		if iter == 0 {
			break
		}
	}

	return keys, nil
}

func Incr(counterKey string) (int, error) {
	return redis.Int(clusterConn.Do(\"INCR\", counterKey))
}

func HSET(key, field string, value []byte) error {
	_, err := clusterConn.Do(\"HSET\", key, field, value)

	if nil != err {
		v := string(value)
		if len(v) > 15 {
			v = v[0:12] + \"...\"
		}
		return fmt.Errorf(\"error setting key %s to %s:" 0 1 (fontified t) 1 2 (fontified t face whitespace-tab) 2 38 (fontified t face font-lock-string-face) 38 39 (fontified t) 39 42 (fontified t) 42 46 (fontified t face font-lock-keyword-face) 46 47 (fontified t) 47 51 (fontified t face font-lock-function-name-face) 51 54 (fontified t) 54 59 (fontified t face font-lock-type-face) 59 62 (fontified t) 62 63 (fontified t face whitespace-tab) 63 79 (fontified t) 79 85 (fontified t face font-lock-function-name-face) 85 98 (fontified t) 98 100 (fontified t face font-lock-function-name-face) 100 101 (fontified t) 101 107 (fontified t face font-lock-string-face) 107 110 (fontified t) 110 111 (fontified t face whitespace-tab) 111 113 (fontified t face font-lock-keyword-face) 113 121 (fontified t) 121 124 (fontified t face font-lock-constant-face) 124 127 (fontified t) 127 129 (fontified t face whitespace-tab) 129 135 (fontified t face font-lock-keyword-face) 135 140 (fontified t) 140 146 (fontified t face font-lock-function-name-face) 146 147 (fontified t) 147 169 (fontified t face font-lock-string-face) 169 176 (fontified t) 176 177 (fontified t face whitespace-tab) 177 179 (fontified t) 179 180 (fontified t face whitespace-tab) 180 186 (fontified t face font-lock-keyword-face) 186 187 (fontified t) 187 190 (fontified t face font-lock-constant-face) 190 194 (fontified t) 194 198 (fontified t face font-lock-keyword-face) 198 199 (fontified t) 199 202 (fontified t face font-lock-function-name-face) 202 207 (fontified t) 207 213 (fontified t face font-lock-type-face) 213 218 (fontified t) 218 222 (fontified t face font-lock-type-face) 222 224 (fontified t) 224 229 (fontified t face font-lock-type-face) 229 233 (fontified t) 233 234 (fontified t face whitespace-tab) 234 237 (fontified t face font-lock-keyword-face) 237 245 (fontified t) 245 249 (fontified t face font-lock-type-face) 249 250 (fontified t) 250 251 (fontified t face whitespace-tab) 251 270 (fontified t) 270 275 (fontified t face font-lock-function-name-face) 275 288 (fontified t) 288 290 (fontified t face font-lock-function-name-face) 290 291 (fontified t) 291 296 (fontified t face font-lock-string-face) 296 304 (fontified t) 304 305 (fontified t face whitespace-tab) 305 307 (fontified t face font-lock-keyword-face) 307 315 (fontified t) 315 318 (fontified t face font-lock-constant-face) 318 321 (fontified t) 321 323 (fontified t face whitespace-tab) 323 329 (fontified t face font-lock-keyword-face) 329 340 (fontified t) 340 346 (fontified t face font-lock-function-name-face) 346 347 (fontified t) 347 373 (fontified t face font-lock-string-face) 373 385 (fontified t) 385 386 (fontified t face whitespace-tab) 386 388 (fontified t) 388 389 (fontified t face whitespace-tab) 389 395 (fontified t face font-lock-keyword-face) 395 409 (fontified t) 409 413 (fontified t face font-lock-keyword-face) 413 414 (fontified t) 414 417 (fontified t face font-lock-function-name-face) 417 422 (fontified t) 422 428 (fontified t face font-lock-type-face) 428 438 (fontified t) 438 442 (fontified t face font-lock-type-face) 442 444 (fontified t) 444 449 (fontified t face font-lock-type-face) 449 452 (fontified t) 452 453 (fontified t face whitespace-tab) 453 470 (fontified t) 470 475 (fontified t) 475 477 (fontified t face font-lock-function-name-face) 477 478 (fontified t) 478 483 (fontified t face font-lock-string-face) 483 497 (fontified t) 497 498 (fontified t face whitespace-tab) 498 500 (fontified t face font-lock-keyword-face) 500 508 (fontified t) 508 511 (face font-lock-constant-face fontified t) 511 514 (fontified t) 514 516 (fontified t face whitespace-tab) 516 521 (fontified t) 521 527 (fontified t face font-lock-function-name-face) 527 535 (fontified t) 535 537 (fontified t face whitespace-tab) 537 539 (fontified t face font-lock-keyword-face) 539 540 (fontified t) 540 543 (fontified t face font-lock-builtin-face) 543 554 (fontified t) 554 557 (fontified t face whitespace-tab) 557 571 (fontified t) 571 576 (fontified t face font-lock-string-face) 576 577 (fontified t) 577 579 (fontified t face whitespace-tab) 579 581 (fontified t) 581 583 (fontified t face whitespace-tab) 583 589 (fontified t face font-lock-keyword-face) 589 594 (fontified t) 594 600 (fontified t face font-lock-function-name-face) 600 601 (fontified t) 601 633 (fontified t face font-lock-string-face) 633 648 (fontified t) 648 649 (fontified t face whitespace-tab) 649 651 (fontified t) 651 652 (fontified t face whitespace-tab) 652 658 (fontified t face font-lock-keyword-face) 658 665 (fontified t) 665 666 (fontified t) 666 670 (fontified t face font-lock-keyword-face) 670 671 (fontified t) 671 676 (fontified t face font-lock-function-name-face) 676 677 (fontified t) 677 680 (fontified t) 680 681 (fontified t) 681 687 (fontified t face font-lock-type-face) 687 693 (fontified t) 693 698 (fontified t face font-lock-type-face) 698 706 (fontified t) 706 707 (fontified t) 707 708 (fontified t) 708 712 (fontified t face font-lock-type-face) 712 714 (fontified t) 714 719 (fontified t face font-lock-type-face) 719 720 (fontified t) 720 722 (fontified t) 722 723 (fontified t face whitespace-tab) 723 733 (fontified t) 733 745 (fontified t) 745 747 (fontified t face font-lock-function-name-face) 747 748 (fontified t) 748 754 (fontified t face font-lock-string-face) 754 755 (fontified t face font-lock-string-face) 755 767 (fontified t) 767 772 (fontified t) 772 774 (fontified t) 774 775 (fontified t) 775 776 (fontified t face whitespace-tab) 776 778 (fontified t face font-lock-keyword-face) 778 786 (fontified t) 786 789 (fontified t face font-lock-constant-face) 789 792 (fontified t) 792 794 (fontified t face whitespace-tab) 794 799 (fontified t) 799 805 (fontified t face font-lock-function-name-face) 805 813 (fontified t) 813 815 (fontified t face whitespace-tab) 815 817 (fontified t face font-lock-keyword-face) 817 818 (fontified t) 818 821 (fontified t face font-lock-builtin-face) 821 832 (fontified t) 832 835 (fontified t face whitespace-tab) 835 849 (fontified t) 849 854 (fontified t face font-lock-string-face) 854 855 (fontified t) 855 857 (fontified t face whitespace-tab) 857 859 (fontified t) 859 861 (fontified t face whitespace-tab) 861 867 (fontified t face font-lock-keyword-face) 867 872 (fontified t) 872 878 (fontified t face font-lock-function-name-face) 878 879 (fontified t) 879 911 (fontified t face font-lock-string-face) 911 926 (fontified t) 926 927 (fontified t face whitespace-tab) 927 928 (fontified t) 928 929 (fontified t) 929 930 (fontified t face whitespace-tab) 930 936 (fontified t face font-lock-keyword-face) 936 940 (fontified t) 940 941 (fontified t) 941 942 (fontified t) 942 943 (fontified t) 943 944 (fontified t) 944 948 (fontified t face font-lock-keyword-face) 948 949 (fontified t) 949 955 (fontified t face font-lock-function-name-face) 955 960 (fontified t) 960 966 (fontified t face font-lock-type-face) 966 969 (fontified t) 969 973 (fontified t face font-lock-type-face) 973 975 (fontified t) 975 980 (fontified t face font-lock-type-face) 980 984 (fontified t) 984 985 (fontified t face whitespace-tab) 985 1002 (fontified t) 1002 1006 (fontified t face font-lock-function-name-face) 1006 1019 (fontified t) 1019 1021 (fontified t face font-lock-function-name-face) 1021 1022 (fontified t) 1022 1030 (fontified t face font-lock-string-face) 1030 1038 (fontified t) 1038 1039 (fontified t face whitespace-tab) 1039 1041 (fontified t face font-lock-keyword-face) 1041 1049 (fontified t) 1049 1052 (fontified t face font-lock-constant-face) 1052 1055 (fontified t) 1055 1057 (fontified t face whitespace-tab) 1057 1063 (fontified t face font-lock-keyword-face) 1063 1072 (fontified t) 1072 1078 (fontified t face font-lock-function-name-face) 1078 1079 (fontified t) 1079 1116 (fontified t face font-lock-string-face) 1116 1128 (fontified t) 1128 1129 (fontified t face whitespace-tab) 1129 1131 (fontified t) 1131 1132 (fontified t face whitespace-tab) 1132 1138 (fontified t face font-lock-keyword-face) 1138 1150 (fontified t) 1150 1154 (fontified t face font-lock-keyword-face) 1154 1155 (fontified t) 1155 1161 (fontified t face font-lock-function-name-face) 1161 1166 (fontified t) 1166 1172 (fontified t face font-lock-type-face) 1172 1174 (fontified t) 1174 1179 (fontified t face font-lock-type-face) 1179 1182 (fontified t) 1182 1183 (fontified t face whitespace-tab) 1183 1205 (fontified t) 1205 1207 (fontified t face font-lock-function-name-face) 1207 1208 (fontified t) 1208 1213 (fontified t face font-lock-string-face) 1213 1220 (fontified t) 1220 1221 (fontified t face whitespace-tab) 1221 1227 (fontified t face font-lock-keyword-face) 1227 1235 (fontified t) 1235 1239 (fontified t face font-lock-keyword-face) 1239 1240 (fontified t) 1240 1247 (fontified t face font-lock-function-name-face) 1247 1256 (fontified t) 1256 1262 (fontified t face font-lock-type-face) 1262 1267 (fontified t) 1267 1273 (fontified t face font-lock-type-face) 1273 1275 (fontified t) 1275 1280 (fontified t face font-lock-type-face) 1280 1284 (fontified t) 1284 1285 (fontified t face whitespace-tab) 1285 1292 (fontified t) 1292 1295 (fontified t) 1295 1296 (fontified t face whitespace-tab) 1296 1306 (fontified t) 1306 1312 (fontified t face font-lock-type-face) 1312 1315 (fontified t) 1315 1316 (fontified t face whitespace-tab) 1316 1319 (fontified t face font-lock-keyword-face) 1319 1322 (fontified t) 1322 1324 (fontified t face whitespace-tab) 1324 1342 (fontified t) 1342 1348 (fontified t face font-lock-function-name-face) 1348 1361 (fontified t) 1361 1363 (fontified t face font-lock-function-name-face) 1363 1364 (fontified t) 1364 1370 (fontified t face font-lock-string-face) 1370 1371 (fontified t) 1371 1378 (fontified t) 1378 1385 (fontified t face font-lock-string-face) 1385 1397 (fontified t) 1397 1399 (fontified t face whitespace-tab) 1399 1401 (fontified t face font-lock-keyword-face) 1401 1409 (fontified t) 1409 1412 (fontified t face font-lock-constant-face) 1412 1415 (fontified t) 1415 1418 (fontified t face whitespace-tab) 1418 1420 (fontified t face font-lock-keyword-face) 1420 1424 (fontified t face font-lock-keyword-face) 1424 1427 (fontified t) 1427 1432 (fontified t) 1432 1435 (fontified t) 1435 1436 (fontified t face font-lock-function-name-face) 1436 1437 (fontified t face font-lock-function-name-face) 1437 1438 (fontified t face font-lock-function-name-face) 1438 1439 (fontified t face font-lock-function-name-face) 1439 1441 (fontified t face font-lock-function-name-face) 1441 1442 (fontified t) 1442 1443 (fontified t face font-lock-string-face) 1443 1470 (fontified t face font-lock-string-face) 1470 1481 (fontified t) 1481 1483 (fontified t face whitespace-tab) 1483 1486 (fontified t) 1486 1488 (fontified t face whitespace-tab) 1488 1504 (fontified t) 1504 1507 (fontified t face font-lock-function-name-face) 1507 1516 (fontified t) 1516 1519 (fontified t face font-lock-constant-face) 1519 1521 (fontified t) 1521 1523 (fontified t face whitespace-tab) 1523 1537 (fontified t) 1537 1544 (fontified t face font-lock-function-name-face) 1544 1553 (fontified t) 1553 1556 (fontified t face font-lock-constant-face) 1556 1558 (fontified t) 1558 1560 (fontified t face whitespace-tab) 1560 1567 (fontified t) 1567 1573 (fontified t face font-lock-builtin-face) 1573 1587 (fontified t) 1587 1589 (fontified t face whitespace-tab) 1589 1591 (fontified t face font-lock-keyword-face) 1591 1604 (fontified t) 1604 1607 (fontified t face whitespace-tab) 1607 1612 (fontified t face font-lock-keyword-face) 1612 1613 (fontified t) 1613 1615 (fontified t face whitespace-tab) 1615 1617 (fontified t) 1617 1618 (fontified t face whitespace-tab) 1618 1621 (fontified t) 1621 1622 (fontified t face whitespace-tab) 1622 1628 (fontified t face font-lock-keyword-face) 1628 1635 (fontified t) 1635 1638 (fontified t face font-lock-constant-face) 1638 1642 (fontified t) 1642 1646 (fontified t face font-lock-keyword-face) 1646 1647 (fontified t) 1647 1651 (fontified t face font-lock-function-name-face) 1651 1663 (fontified t) 1663 1669 (fontified t face font-lock-type-face) 1669 1672 (fontified t) 1672 1675 (fontified t face font-lock-type-face) 1675 1677 (fontified t) 1677 1682 (fontified t face font-lock-type-face) 1682 1686 (fontified t) 1686 1687 (fontified t face whitespace-tab) 1687 1693 (fontified t face font-lock-keyword-face) 1693 1700 (fontified t) 1700 1703 (fontified t face font-lock-function-name-face) 1703 1716 (fontified t) 1716 1718 (fontified t face font-lock-function-name-face) 1718 1719 (fontified t) 1719 1725 (fontified t face font-lock-string-face) 1725 1743 (fontified t) 1743 1747 (fontified t face font-lock-keyword-face) 1747 1748 (fontified t) 1748 1752 (fontified t face font-lock-function-name-face) 1752 1764 (fontified t) 1764 1770 (fontified t face font-lock-type-face) 1770 1780 (fontified t) 1780 1784 (fontified t face font-lock-type-face) 1784 1786 (fontified t) 1786 1791 (fontified t face font-lock-type-face) 1791 1794 (fontified t) 1794 1795 (fontified t face whitespace-tab) 1795 1817 (fontified t) 1817 1819 (face font-lock-function-name-face fontified t) 1819 1820 (fontified t) 1820 1826 (face font-lock-string-face fontified t) 1826 1847 (fontified t) 1847 1848 (fontified t) 1848 1849 (fontified t face whitespace-tab) 1849 1851 (fontified t face font-lock-keyword-face) 1851 1852 (fontified t) 1852 1855 (fontified t face font-lock-constant-face) 1855 1865 (fontified t) 1865 1867 (fontified t face whitespace-tab) 1867 1872 (fontified t) 1872 1878 (fontified t face font-lock-function-name-face) 1878 1886 (fontified t) 1886 1888 (fontified t face whitespace-tab) 1888 1890 (fontified t face font-lock-keyword-face) 1890 1891 (fontified t) 1891 1894 (fontified t face font-lock-builtin-face) 1894 1897 (fontified t) 1897 1905 (fontified t) 1905 1908 (fontified t face whitespace-tab) 1908 1922 (fontified t) 1922 1927 (fontified t face font-lock-string-face) 1927 1928 (fontified t) 1928 1930 (fontified t face whitespace-tab) 1930 1932 (fontified t) 1932 1934 (fontified t face whitespace-tab) 1934 1940 (fontified t face font-lock-keyword-face) 1940 1945 (fontified t) 1945 1951 (fontified t face font-lock-function-name-face) 1951 1952 (fontified t) 1952 1980 (fontified t face font-lock-string-face)) . 32) (undo-tree-id130 . -928) (undo-tree-id131 . -581) (undo-tree-id132 . -1155) (undo-tree-id133 . -1796) (undo-tree-id134 . -1155) (undo-tree-id135 . -1161) (undo-tree-id136 . -1155) (undo-tree-id137 . -417) (undo-tree-id138 . -414) (undo-tree-id139 . -689) (undo-tree-id140 . -689) (undo-tree-id141 . -762) (undo-tree-id142 . -689) (undo-tree-id143 . -774) (undo-tree-id144 . -774) (undo-tree-id145 . -650) (undo-tree-id146 . -774) (undo-tree-id147 . -774) (t 23301 12856 921859 324000)) nil (23303 47221 373921 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -960) (undo-tree-id103 . -1) (undo-tree-id104 . -1) 961 (t 23301 12855 323756 104000)) nil (23301 12856 917135 0) 0 nil]) ((806 . 807) (t 23301 12853 543068 284000)) nil (23301 12855 319339 0) 0 nil]) ((962 . 972)) nil (23301 12853 538614 0) 0 nil]) ((961 . 962) (#("	" 0 1 (fontified nil face whitespace-tab)) . 960) (undo-tree-id98 . -1) (959 . 962)) nil (23301 12853 538644 0) 0 nil]) ((806 . 807) (#("		" 0 1 (fontified t face whitespace-tab) 1 2 (fontified t face whitespace-tab)) . -806) (undo-tree-id99 . -1)) nil (23301 12853 538653 0) 0 nil]) ((807 . 960)) nil (23301 12853 538657 0) 0 nil]) ((806 . 807)) nil (23301 12853 538660 0) 0 nil]) ((#("	return err" 0 1 (fontified t face whitespace-tab) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 11 (fontified t)) . -806) (undo-tree-id100 . -11) (undo-tree-id101 . -8) (undo-tree-id102 . -11) 817 (t 23301 12829 176372 224000)) nil (23301 12853 538687 0) 0 nil]) ((814 . 817) (#("er" 0 2 (fontified t)) . -814) (undo-tree-id2 . -2) (undo-tree-id3 . 2) (undo-tree-id4 . -1) (undo-tree-id5 . -2) 816) nil (23301 12829 171629 0) 0 nil]) ((807 . 816)) nil (23301 12829 171639 0) 0 nil]) ((806 . 807)) nil (23301 12829 171643 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -806) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 807) nil (23301 12829 171654 0) 0 nil]) ((#("	" 0 1 (fontified t face whitespace-trailing)) . 807) (undo-tree-id8 . -1) (undo-tree-id9 . -1)) nil (23301 12829 171660 0) 0 nil]) ((#("	if err != nil {
		v := string(value)
	}" 0 1 (fontified t face whitespace-tab) 1 3 (fontified t face font-lock-keyword-face) 3 11 (fontified t) 11 14 (fontified t face font-lock-constant-face) 14 15 (fontified t) 15 17 (fontified t) 17 19 (fontified t face whitespace-tab) 19 20 (fontified t) 20 24 (fontified t) 24 30 (fontified t face font-lock-function-name-face) 30 31 (fontified t) 31 36 (fontified t) 36 37 (fontified t) 37 38 (fontified t) 38 39 (fontified t face whitespace-tab) 39 40 (fontified t)) . -806) (undo-tree-id10 . -40) (undo-tree-id11 . -31) (undo-tree-id12 . -40) (undo-tree-id13 . 1) (undo-tree-id14 . -40) (undo-tree-id15 . 25) (undo-tree-id16 . -16) 846) nil (23301 12829 171674 0) 0 nil]) ((#(" " 0 1 (fontified t)) . -836) (undo-tree-id17 . -1) 837) nil (23301 12829 171682 0) 0 nil]) ((838 . 843) (#("va" 0 2 (fontified t)) . -838) (undo-tree-id18 . -2) 840) nil (23301 12829 171692 0) 0 nil]) ((838 . 840) (837 . 839) (#("(" 0 1 (fontified nil)) . -837) (837 . 838)) nil (23301 12829 171696 0) 0 nil]) ((#("v" 0 1 (fontified t)) . -837) (undo-tree-id19 . -1) 838) nil (23301 12829 171704 0) 0 nil]) ((833 . 838)) nil (23301 12829 171707 0) 0 nil]) ((#("n" 0 1 (fontified t)) . -833) (undo-tree-id20 . -1) 834) nil (23301 12829 171714 0) 0 nil]) ((826 . 834)) nil (23301 12829 171717 0) 0 nil]) ((#("a" 0 1 (fontified t)) . -826) (undo-tree-id21 . -1) 827) nil (23301 12829 171724 0) 0 nil]) ((825 . 827)) nil (23301 12829 171728 0) 0 nil]) ((823 . 825)) nil (23301 12829 171729 0) 0 nil]) ((824 . 825) (#("		" 0 2 (fontified nil)) . 823) (823 . 825) (#("	" 0 1 (fontified nil face whitespace-tab)) . -823) (undo-tree-id22 . -1) (822 . 825)) nil (23301 12829 171736 0) 0 nil]) ((821 . 823) (#("{" 0 1 (fontified nil)) . -821) (821 . 822)) nil (23301 12829 171738 0) 0 nil]) ((751 . 752)) nil (23301 12829 171742 0) 0 nil]) ((746 . 751)) nil (23301 12829 171744 0) 0 nil]) ((814 . 815)) nil (23301 12829 171748 0) 0 nil]) ((812 . 814)) nil (23301 12829 171749 0) 0 nil]) ((#("o" 0 1 (fontified t)) . -812) (undo-tree-id23 . -1) 813) nil (23301 12829 171758 0) 0 nil]) ((803 . 813)) nil (23301 12829 171760 0) 0 nil]) ((#("e" 0 1 (fontified t)) . -803) (undo-tree-id24 . -1) (#("r" 0 1 (fontified nil)) . -804) 805) nil (23301 12829 171770 0) 0 nil]) ((803 . 805)) nil (23301 12829 171772 0) 0 nil]) ((#(" " 0 1 (fontified t)) . -803) (undo-tree-id25 . -1) (#("a" 0 1 (fontified t)) . -804) (undo-tree-id26 . -1) 805) nil (23301 12829 171782 0) 0 nil]) ((801 . 805)) nil (23301 12829 171786 0) 0 nil]) ((799 . 801)) nil (23301 12829 171789 0) 0 nil]) ((793 . 798) (#("va" 0 2 (fontified t)) . -793) (undo-tree-id27 . -2) 795) nil (23301 12829 171794 0) 0 nil]) ((793 . 795)) nil (23301 12829 171797 0) 0 nil]) ((#("b" 0 1 (fontified t)) . -793) (undo-tree-id28 . -1) 794) nil (23301 12829 171800 0) 0 nil]) ((788 . 794)) nil (23301 12829 171803 0) 0 nil]) ((721 . 724)) nil (23301 12829 171805 0) 0 nil]) ((#("exp" 0 3 (fontified t)) . -721) (undo-tree-id29 . -3) (undo-tree-id30 . -3) 724) nil (23301 12829 171815 0) 0 nil]) ((#("value" 0 5 (fontified t)) . -788) (undo-tree-id31 . -5) (undo-tree-id32 . -1) (undo-tree-id33 . -5) 793) nil (23301 12829 171822 0) 0 nil]) ((794 . 796)) nil (23301 12829 171825 0) 0 nil]) ((788 . 793) (#("va" 0 2 (fontified t)) . -788) (undo-tree-id34 . -2) 790) nil (23301 12829 171830 0) 0 nil]) ((781 . 790)) nil (23301 12829 171832 0) 0 nil]) ((779 . 780)) nil (23301 12829 171833 0) 0 nil]) ((#("C" 0 1 (fontified t face font-lock-string-face)) . -779) (undo-tree-id35 . -1) 780) nil (23301 12829 171840 0) 0 nil]) ((775 . 780)) nil (23301 12829 171843 0) 0 nil]) ((#("E" 0 1 (fontified t face font-lock-string-face)) . -775) (undo-tree-id36 . -1) 776) nil (23301 12829 171851 0) 0 nil]) ((775 . 776) (774 . 776) (#("\"" 0 1 (fontified nil)) . -774) (774 . 775) (773 . 775) (#("(" 0 1 (fontified nil)) . -773) (772 . 774)) nil (23301 12829 171855 0) 0 nil]) ((#("i" 0 1 (fontified t)) . -772) (undo-tree-id37 . -1) 773) nil (23301 12829 171862 0) 0 nil]) ((770 . 773)) nil (23301 12829 171863 0) 0 nil]) ((759 . 770) (#("clus" 0 4 (fontified t)) . -759) (undo-tree-id38 . -4) 763) nil (23301 12829 171870 0) 0 nil]) ((760 . 763)) nil (23301 12829 171872 0) 0 nil]) ((#("u" 0 1 (fontified t)) . -760) (undo-tree-id39 . -1) 761) nil (23301 12829 171880 0) 0 nil]) ((759 . 761)) nil (23301 12829 171882 0) 0 nil]) ((750 . 759)) nil (23301 12829 171885 0) 0 nil]) ((#("e" 0 1 (fontified t)) . -750) (undo-tree-id40 . -1) 751) nil (23301 12829 171890 0) 0 nil]) ((749 . 751)) nil (23301 12829 171893 0) 0 nil]) ((748 . 749)) nil (23301 12829 171894 0) 0 nil]) ((#("	" 0 1 (fontified nil)) . 748) (748 . 749) (747 . 749)) nil (23301 12829 171898 0) 0 nil]) ((746 . 748) (#("{" 0 1 (fontified nil)) . -746) (745 . 747)) nil (23301 12829 171900 0) 0 nil]) ((740 . 744)) nil (23301 12829 171906 0) 0 nil]) ((738 . 740) (#("[" 0 1 (fontified nil)) . -738) (736 . 739)) nil (23301 12829 171908 0) 0 nil]) ((#("d" 0 1 (fontified t)) . -736) (undo-tree-id41 . -1) (#(" " 0 1 (fontified t)) . -737) (undo-tree-id42 . -1) 738) nil (23301 12829 171921 0) 0 nil]) ((732 . 738)) nil (23301 12829 171922 0) 0 nil]) ((721 . 732)) nil (23301 12829 171924 0) 0 nil]) ((#("t" 0 1 (fontified t)) . -721) (undo-tree-id43 . -1) (#("i" 0 1 (fontified t)) . -722) (undo-tree-id44 . -1) (#("m" 0 1 (fontified t)) . -723) (undo-tree-id45 . -1) 724) nil (23301 12829 171937 0) 0 nil]) ((721 . 724)) nil (23301 12829 171943 0) 0 nil]) ((#("i" 0 1 (fontified t)) . -721) (undo-tree-id46 . -1) (#("n" 0 1 (fontified t)) . -722) (undo-tree-id47 . -1) (#("t" 0 1 (fontified t)) . -723) (undo-tree-id48 . -1) 724) nil (23301 12829 171955 0) 0 nil]) ((721 . 724)) nil (23301 12829 171960 0) 0 nil]) ((#("v" 0 1 (fontified t)) . -721) (undo-tree-id49 . -1) (#("a" 0 1 (fontified t)) . -722) (undo-tree-id50 . -1) (#("l" 0 1 (fontified t)) . -723) (undo-tree-id51 . -1) (#("u" 0 1 (fontified t)) . -724) (undo-tree-id52 . -1) (#("e" 0 1 (fontified t)) . -725) (undo-tree-id53 . -1) (#(" " 0 1 (fontified t)) . -726) (undo-tree-id54 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -727) (undo-tree-id55 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -728) (undo-tree-id56 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -729) (undo-tree-id57 . -1) (#("6" 0 1 (fontified t face font-lock-type-face)) . -730) (undo-tree-id58 . -1) (#("4" 0 1 (fontified t face font-lock-type-face)) . -731) (undo-tree-id59 . -1) (#("," 0 1 (fontified t)) . -732) (undo-tree-id60 . -1) (#(" " 0 1 (fontified t)) . -733) (undo-tree-id61 . -1) 734) nil (23301 12829 172009 0) 0 nil]) ((732 . 734)) nil (23301 12829 172017 0) 0 nil]) ((727 . 732) (#("int" 0 3 (fontified t face font-lock-type-face)) . -727) (undo-tree-id62 . -3) 730) nil (23301 12829 172022 0) 0 nil]) ((721 . 730)) nil (23301 12829 172026 0) 0 nil]) ((#("time int64, value " 0 5 (fontified t) 5 10 (fontified t face font-lock-type-face) 10 18 (fontified t)) . 721) (undo-tree-id63 . -18) (undo-tree-id64 . -5) (undo-tree-id65 . -5) (undo-tree-id66 . -5) (undo-tree-id67 . -5) (undo-tree-id68 . -18) (undo-tree-id69 . -5) (undo-tree-id70 . -18)) nil (23301 12829 172062 0) 0 nil]) ((733 . 739)) nil (23301 12829 172064 0) 0 nil]) ((#("b" 0 1 (fontified t)) . -733) (undo-tree-id71 . -1) (#("a" 0 1 (fontified t)) . -734) (undo-tree-id72 . -1) (#("l" 0 1 (fontified t)) . -735) (undo-tree-id73 . -1) 736) nil (23301 12829 172073 0) 0 nil]) ((731 . 736)) nil (23301 12829 172079 0) 0 nil]) ((#("m" 0 1 (fontified t face font-lock-type-face)) . -731) (undo-tree-id74 . -1) (#(" " 0 1 (fontified t)) . -732) (undo-tree-id75 . -1) 733) nil (23301 12829 172087 0) 0 nil]) ((726 . 733)) nil (23301 12829 172091 0) 0 nil]) ((#("Int64String" 0 11 (fontified t face font-lock-type-face)) . 726) (undo-tree-id76 . -11) (undo-tree-id77 . -11) (undo-tree-id78 . -11) (undo-tree-id79 . -11) (undo-tree-id80 . -11)) nil (23301 12829 172099 0) 0 nil]) ((726 . 737) (#("int64" 0 5 (fontified t face font-lock-type-face)) . -726) (undo-tree-id81 . -5) 731) nil (23301 12829 172107 0) 0 nil]) ((727 . 731)) nil (23301 12829 172108 0) 0 nil]) ((#("t" 0 1 (fontified t face font-lock-type-face)) . -727) (undo-tree-id82 . -1) (#(" " 0 1 (fontified t)) . -728) (undo-tree-id83 . -1) (#("t" 0 1 (fontified t)) . -729) (undo-tree-id84 . -1) 730) nil (23301 12829 172122 0) 0 nil]) ((726 . 730)) nil (23301 12829 172126 0) 0 nil]) ((#("s" 0 1 (fontified t face font-lock-type-face)) . -726) (undo-tree-id85 . -1) 727) nil (23301 12829 172133 0) 0 nil]) ((725 . 727)) nil (23301 12829 172134 0) 0 nil]) ((721 . 725)) nil (23301 12829 172138 0) 0 nil]) ((#("e" 0 1 (fontified t)) . -721) (undo-tree-id86 . -1) 722) nil (23301 12829 172142 0) 0 nil]) ((721 . 722)) nil (23301 12829 172146 0) 0 nil]) ((#("v" 0 1 (fontified t)) . -721) (undo-tree-id87 . -1) (#("a" 0 1 (fontified t)) . -722) (undo-tree-id88 . -1) (#("k" 0 1 (fontified t)) . -723) (undo-tree-id89 . -1) (#("u" 0 1 (fontified t)) . -724) (undo-tree-id90 . -1) (#("e" 0 1 (fontified t)) . -725) (undo-tree-id91 . -1) 726) nil (23301 12829 172171 0) 0 nil]) ((721 . 726)) nil (23301 12829 172177 0) 0 nil]) ((#("a" 0 1 (fontified t)) . -721) (undo-tree-id92 . -1) (#("v" 0 1 (fontified t)) . -722) (undo-tree-id93 . -1) (#("a" 0 1 (fontified t)) . -723) (undo-tree-id94 . -1) (#("l" 0 1 (fontified t)) . -724) (undo-tree-id95 . -1) 725) nil (23301 12829 172193 0) 0 nil]) ((719 . 725)) nil (23301 12829 172197 0) 0 nil]) ((#(" " 0 1 (fontified t)) . -719) (undo-tree-id96 . -1) 720) nil (23301 12829 172204 0) 0 nil]) ((709 . 720)) nil (23301 12829 172207 0) 0 nil]) ((#("k" 0 1 (fontified t face font-lock-type-face)) . -709) (undo-tree-id97 . -1) 710) nil (23301 12829 172227 0) 0 nil]) ((709 . 710) (708 . 710) (#("(" 0 1 (fontified nil face font-lock-function-name-face)) . -708) (698 . 709)) nil (23301 12829 172233 0) 0 nil]) ((698 . 699)) nil (23301 12829 172237 0) 0 nil]) ((697 . 698) (t 23301 11057 949530 42000)) nil (23301 12829 172240 0) 0 nil]) ((32 . 33) 1760) nil (23301 11057 946052 0) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-string-face)) . -1736) (undo-tree-id0 . -1) (#("%" 0 1 (fontified t face font-lock-string-face)) . -1737) (undo-tree-id1 . -1) 1738) nil (23301 11057 946081 0) 0 nil]) ((#("v" 0 1 (fontified t face font-lock-string-face)) . 1738) (t 23291 55541 155135 296000)) nil (23301 11057 946086 0) 0 nil]) nil nil (23301 11057 946090 0) 0 nil] #3# 11486 133 nil]