"c0c7b717e3a8fae434850f8b6e7e4cd709cefcb4"
[cl-struct-undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#9=[nil nil ((454 . 464) (#("Re" 0 2 (fontified t)) . -454) (undo-tree-id219 . -2) (undo-tree-id220 . 2) (undo-tree-id221 . -1) (undo-tree-id222 . -2) 456) nil (23301 18257 733128 0) 0 nil]) ((454 . 456)) nil (23301 18257 733136 0) 0 nil]) ((#("r" 0 1 (fontified t)) . -454) (undo-tree-id223 . -1) 455) nil (23301 18257 733145 0) 0 nil]) ((453 . 455)) nil (23301 18257 733148 0) 0 nil]) ((#("sessions.Store" 0 8 (fontified t) 8 14 (fontified t)) . -453) (undo-tree-id224 . -14) (undo-tree-id225 . -8) (undo-tree-id226 . -8) (undo-tree-id227 . -8) (undo-tree-id228 . -14) 467 (t 23301 18241 529419 282000)) nil (23301 18257 733165 0) 0 nil] [nil nil ((#(".Store" 0 6 (fontified t)) . -461)) ((461 . 467)) (23301 18238 249436 0) 0 (:region [461 467 nil nil])]) ((undo-tree-id214 . -6) (undo-tree-id215 . -2) (undo-tree-id216 . -1) (undo-tree-id217 . -6) (undo-tree-id218 . -6) 467) nil (23301 18238 249528 0) 0 nil] [nil nil ((#(".Store" 0 6 (fontified nil)) . 461) (t 23301 18191 362827 781000)) ((461 . 467)) (23301 18238 249431 0) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil nil ((#("&" 0 1 (fontified t)) . 1068) (undo-tree-id191 . -1) (t 23301 17906 419639 843000)) ((1068 . 1069) (t 23301 18062 130202 662000)) (23301 18062 122305 0) 0 nil]) ((1060 . 1067) (#("Opt" 0 3 (fontified t face font-lock-function-name-face)) . -1060) (undo-tree-id168 . -3) (undo-tree-id170 . -2) 1063) ((1060 . 1063) (#("Options" 0 7 (fontified t face font-lock-function-name-face)) . 1060)) (23301 18179 805318 0) 0 nil]) ((1060 . 1063)) ((#("Opt" 0 3 (fontified t face font-lock-function-name-face)) . 1060) (undo-tree-id192 . -3) (undo-tree-id193 . -3)) (23301 18180 562045 0) 0 nil]) ((#("SetOptions" 0 10 (fontified t face font-lock-function-name-face)) . 1060) (undo-tree-id172 . -10) (undo-tree-id173 . -10) (t 23301 17879 34600 477000)) ((1060 . 1070)) (23301 18181 175356 0) 0 nil]) ((81 . 1249) ("in-contrib/sessions\"
	goginredis \"github.com/gin-contrib/sessions/redis\"
)

type CookieConfig struct {
	CookieKey      string `json:\"cookie_key\"`
	CookiePath     string `json:\"cookie_path\"`
	CookieMaxAge   int    `json:\"cookie_max_age\"`
	CookieSecure   bool   `json:\"cookie_secure\"`
	CookieHTTPOnly bool   `json:\"cookie_http_only\"`
	SessionName    string `json:\"session_name\"`
}

var cookieConfig *CookieConfig
var sessionStore sessions.Store

func GetSessionStore() sessions.Store {
	return sessionStore
}

func GetSessionConfig() *CookieConfig {
	return cookieConfig
}

func Initialize(config *CookieConfig) {

	cookieConfig = &CookieConfig{
		CookieKey:      config.CookieKey,
		CookiePath:     config.CookiePath,
		CookieMaxAge:   config.CookieMaxAge,
		CookieSecure:   config.CookieSecure,
		CookieHTTPOnly: config.CookieHTTPOnly,
		SessionName:    config.SessionName,
	}

	createSessionStore()
}

func createSessionStore() {
	pool := redis.GetRedisPool()
	var storeErr error
	sessionStore, storeErr = goginredis.NewStoreWithPool(pool, []byte(cookieConfig.CookieKey))

	if storeErr != nil {
		panic(\"Error Creating Session Store err: \" + storeErr.Error())
	}
	sessionStore.Options(sessions.Options{
		Path:     cookieConfig.CookiePath,
		MaxAge:   cookieConfig.CookieMaxAge,
		Secure:   cookieConfig.CookieSecure,
		HttpOnly: cookieConfig.CookieHTTPOnly,
	})
" . 81) (t 23301 17537 346487 419000)) ((81 . 1445) (#("orilla/sessions\"
)

type CookieConfig struct {
	CookieKey      string `json:\"cookie_key\"`
	CookiePath     string `json:\"cookie_path\"`
	CookieMaxAge   int    `json:\"cookie_max_age\"`
	CookieSecure   bool   `json:\"cookie_secure\"`
	CookieHTTPOnly bool   `json:\"cookie_http_only\"`
	SessionName    string `json:\"session_name\"`
}

var cookieConfig *CookieConfig
var sessionStore *RedisStore

func GetSessionStore() sessions.Store {
	return sessionStore
}

func GetSessionConfig() *CookieConfig {
	return cookieConfig
}

func Initialize(config *CookieConfig) {

	cookieConfig = &CookieConfig{
		CookieKey:      config.CookieKey,
		CookiePath:     config.CookiePath,
		CookieMaxAge:   config.CookieMaxAge,
		CookieSecure:   config.CookieSecure,
		CookieHTTPOnly: config.CookieHTTPOnly,
		SessionName:    config.SessionName,
	}

	createSessionStore()
}

func createSessionStore() {
	conn := redis.GetConn()
	sessionStore = NewRedisStore(conn, []byte(cookieConfig.CookieKey))
	sessionStore.SetOptions(&sessions.Options{
		Path:     cookieConfig.CookiePath,
		MaxAge:   cookieConfig.CookieMaxAge,
		Secure:   cookieConfig.CookieSecure,
		HttpOnly: cookieConfig.CookieHTTPOnly,
	})" 0 16 (fontified t face font-lock-string-face) 16 20 (fontified t) 20 24 (fontified t face font-lock-keyword-face) 24 25 (fontified t) 25 37 (fontified t face font-lock-type-face) 37 38 (fontified t) 38 44 (fontified t face font-lock-keyword-face) 44 47 (fontified t) 47 48 (fontified t face whitespace-tab) 48 70 (fontified t) 70 89 (fontified t face font-lock-string-face) 89 90 (fontified t) 90 91 (fontified t face whitespace-tab) 91 113 (fontified t) 113 133 (fontified t face font-lock-string-face) 133 134 (fontified t) 134 135 (fontified t face whitespace-tab) 135 157 (fontified t) 157 180 (fontified t face font-lock-string-face) 180 181 (fontified t) 181 182 (fontified t face whitespace-tab) 182 204 (fontified t) 204 226 (fontified t face font-lock-string-face) 226 227 (fontified t) 227 228 (fontified t face whitespace-tab) 228 250 (fontified t) 250 275 (fontified t face font-lock-string-face) 275 276 (fontified t) 276 277 (fontified t face whitespace-tab) 277 299 (fontified t) 299 320 (fontified t face font-lock-string-face) 320 324 (fontified t) 324 327 (fontified t face font-lock-keyword-face) 327 355 (fontified t) 355 358 (fontified t face font-lock-keyword-face) 358 385 (fontified t) 385 389 (fontified t face font-lock-keyword-face) 389 390 (fontified t) 390 405 (fontified t face font-lock-function-name-face) 405 408 (fontified t) 408 422 (fontified t face font-lock-type-face) 422 425 (fontified t) 425 426 (fontified t face whitespace-tab) 426 432 (fontified t face font-lock-keyword-face) 432 449 (fontified t) 449 453 (fontified t face font-lock-keyword-face) 453 454 (fontified t) 454 470 (fontified t face font-lock-function-name-face) 470 474 (fontified t) 474 486 (fontified t face font-lock-type-face) 486 489 (fontified t) 489 490 (fontified t face whitespace-tab) 490 496 (fontified t face font-lock-keyword-face) 496 513 (fontified t) 513 517 (fontified t face font-lock-keyword-face) 517 518 (fontified t) 518 528 (fontified t face font-lock-function-name-face) 528 537 (fontified t) 537 549 (fontified t face font-lock-type-face) 549 554 (fontified t) 554 555 (fontified t face whitespace-tab) 555 571 (fontified t) 571 583 (fontified t face font-lock-type-face) 583 585 (fontified t) 585 587 (fontified t face whitespace-tab) 587 596 (fontified t face font-lock-constant-face) 596 621 (fontified t) 621 623 (fontified t face whitespace-tab) 623 633 (fontified t face font-lock-constant-face) 633 658 (fontified t) 658 660 (fontified t face whitespace-tab) 660 672 (fontified t face font-lock-constant-face) 672 697 (fontified t) 697 699 (fontified t face whitespace-tab) 699 711 (fontified t face font-lock-constant-face) 711 736 (fontified t) 736 738 (fontified t face whitespace-tab) 738 752 (fontified t face font-lock-constant-face) 752 777 (fontified t) 777 779 (fontified t face whitespace-tab) 779 790 (fontified t face font-lock-constant-face) 790 815 (fontified t) 815 816 (fontified t face whitespace-tab) 816 819 (fontified t) 819 820 (fontified t face whitespace-tab) 820 838 (fontified t face font-lock-function-name-face) 838 844 (fontified t) 844 848 (fontified t face font-lock-keyword-face) 848 849 (fontified t) 849 867 (fontified t face font-lock-function-name-face) 867 872 (fontified t) 872 873 (fontified t face whitespace-tab) 873 887 (fontified t) 887 894 (fontified t face font-lock-function-name-face) 894 897 (fontified t) 897 898 (fontified t face whitespace-tab) 898 913 (fontified t) 913 926 (fontified t face font-lock-function-name-face) 926 935 (fontified t) 935 939 (fontified t face font-lock-function-name-face) 939 965 (fontified t) 965 966 (fontified t face whitespace-tab) 966 979 (fontified t) 979 989 (fontified t face font-lock-function-name-face) 989 990 (fontified t) 990 991 (fontified t) 991 1000 (fontified t) 1000 1007 (fontified t face font-lock-type-face) 1007 1009 (fontified t) 1009 1011 (fontified t face whitespace-tab) 1011 1015 (fontified t face font-lock-constant-face) 1015 1046 (fontified t) 1046 1048 (fontified t face whitespace-tab) 1048 1054 (fontified t face font-lock-constant-face) 1054 1085 (fontified t) 1085 1087 (fontified t face whitespace-tab) 1087 1093 (fontified t face font-lock-constant-face) 1093 1124 (fontified t) 1124 1126 (fontified t face whitespace-tab) 1126 1134 (fontified t face font-lock-constant-face) 1134 1165 (fontified t) 1165 1166 (fontified t face whitespace-tab) 1166 1168 (fontified t)) . 81) (undo-tree-id194 . -989) (undo-tree-id195 . -979) (undo-tree-id196 . -979) (undo-tree-id197 . -979) (undo-tree-id198 . -979) (undo-tree-id199 . -979) (undo-tree-id200 . -979) (undo-tree-id201 . -991) (undo-tree-id202 . -1000) (undo-tree-id203 . -990) (undo-tree-id204 . -979) (undo-tree-id205 . -979) (undo-tree-id206 . -979) (undo-tree-id207 . -990) (undo-tree-id208 . -979) (undo-tree-id209 . -979) (undo-tree-id210 . -979)) (23301 18181 561125 0) 0 nil]) ((81 . 1445) (#("orilla/sessions\"
)

type CookieConfig struct {
	CookieKey      string `json:\"cookie_key\"`
	CookiePath     string `json:\"cookie_path\"`
	CookieMaxAge   int    `json:\"cookie_max_age\"`
	CookieSecure   bool   `json:\"cookie_secure\"`
	CookieHTTPOnly bool   `json:\"cookie_http_only\"`
	SessionName    string `json:\"session_name\"`
}

var cookieConfig *CookieConfig
var sessionStore *RedisStore

func GetSessionStore() sessions.Store {
	return sessionStore
}

func GetSessionConfig() *CookieConfig {
	return cookieConfig
}

func Initialize(config *CookieConfig) {

	cookieConfig = &CookieConfig{
		CookieKey:      config.CookieKey,
		CookiePath:     config.CookiePath,
		CookieMaxAge:   config.CookieMaxAge,
		CookieSecure:   config.CookieSecure,
		CookieHTTPOnly: config.CookieHTTPOnly,
		SessionName:    config.SessionName,
	}

	createSessionStore()
}

func createSessionStore() {
	conn := redis.GetConn()
	sessionStore = NewRedisStore(conn, []byte(cookieConfig.CookieKey))
	sessionStore.SetOptions(&sessions.Options{
		Path:     cookieConfig.CookiePath,
		MaxAge:   cookieConfig.CookieMaxAge,
		Secure:   cookieConfig.CookieSecure,
		HttpOnly: cookieConfig.CookieHTTPOnly,
	})" 0 16 (fontified t face font-lock-string-face) 16 17 (fontified t) 17 19 (fontified t) 19 20 (fontified t) 20 24 (fontified t face font-lock-keyword-face) 24 25 (fontified t) 25 37 (fontified t face font-lock-type-face) 37 38 (fontified t) 38 44 (fontified t face font-lock-keyword-face) 44 47 (fontified t) 47 48 (fontified t face whitespace-tab) 48 70 (fontified t) 70 89 (fontified t face font-lock-string-face) 89 90 (fontified t) 90 91 (fontified t face whitespace-tab) 91 113 (fontified t) 113 133 (fontified t face font-lock-string-face) 133 134 (fontified t) 134 135 (fontified t face whitespace-tab) 135 157 (fontified t) 157 180 (fontified t face font-lock-string-face) 180 181 (fontified t) 181 182 (fontified t face whitespace-tab) 182 204 (fontified t) 204 226 (fontified t face font-lock-string-face) 226 227 (fontified t) 227 228 (fontified t face whitespace-tab) 228 250 (fontified t) 250 275 (fontified t face font-lock-string-face) 275 276 (fontified t) 276 277 (fontified t face whitespace-tab) 277 299 (fontified t) 299 320 (fontified t face font-lock-string-face) 320 324 (fontified t) 324 327 (fontified t face font-lock-keyword-face) 327 355 (fontified t) 355 358 (fontified t face font-lock-keyword-face) 358 373 (fontified t) 373 383 (fontified t) 383 384 (fontified t) 384 385 (fontified t) 385 389 (fontified t face font-lock-keyword-face) 389 390 (fontified t) 390 405 (fontified t face font-lock-function-name-face) 405 408 (fontified t) 408 422 (fontified t face font-lock-type-face) 422 425 (fontified t) 425 426 (fontified t face whitespace-tab) 426 432 (fontified t face font-lock-keyword-face) 432 449 (fontified t) 449 453 (fontified t face font-lock-keyword-face) 453 454 (fontified t) 454 469 (fontified t face font-lock-function-name-face) 469 470 (fontified t face font-lock-function-name-face) 470 474 (fontified t) 474 486 (fontified t face font-lock-type-face) 486 489 (fontified t) 489 490 (fontified t face whitespace-tab) 490 496 (fontified t face font-lock-keyword-face) 496 513 (fontified t) 513 514 (fontified t face font-lock-keyword-face) 514 516 (fontified t face font-lock-keyword-face) 516 517 (fontified t face font-lock-keyword-face) 517 518 (fontified t) 518 528 (fontified t face font-lock-function-name-face) 528 537 (fontified t) 537 549 (fontified t face font-lock-type-face) 549 553 (fontified t) 553 554 (fontified t) 554 555 (fontified t face whitespace-tab) 555 571 (fontified t) 571 583 (fontified t face font-lock-type-face) 583 585 (fontified t) 585 587 (fontified t face whitespace-tab) 587 596 (fontified t face font-lock-constant-face) 596 621 (fontified t) 621 623 (fontified t face whitespace-tab) 623 633 (fontified t face font-lock-constant-face) 633 658 (fontified t) 658 660 (fontified t face whitespace-tab) 660 672 (fontified t face font-lock-constant-face) 672 697 (fontified t) 697 699 (fontified t face whitespace-tab) 699 711 (fontified t face font-lock-constant-face) 711 736 (fontified t) 736 738 (fontified t face whitespace-tab) 738 752 (fontified t face font-lock-constant-face) 752 777 (fontified t) 777 779 (fontified t face whitespace-tab) 779 790 (fontified t face font-lock-constant-face) 790 815 (fontified t) 815 816 (fontified t face whitespace-tab) 816 819 (fontified t) 819 820 (fontified t face whitespace-tab) 820 838 (fontified t face font-lock-function-name-face) 838 844 (fontified t) 844 848 (fontified t face font-lock-keyword-face) 848 849 (fontified t) 849 865 (fontified t face font-lock-function-name-face) 865 867 (fontified t face font-lock-function-name-face) 867 872 (fontified t) 872 873 (fontified t face whitespace-tab) 873 884 (fontified t) 884 887 (fontified t) 887 894 (face font-lock-function-name-face fontified t) 894 897 (fontified t) 897 898 (fontified t face whitespace-tab) 898 913 (fontified t) 913 926 (fontified t face font-lock-function-name-face) 926 935 (fontified t) 935 939 (fontified t face font-lock-function-name-face) 939 964 (fontified t) 964 965 (fontified t) 965 966 (fontified t face whitespace-tab) 966 979 (fontified t) 979 989 (fontified t face font-lock-function-name-face) 989 1000 (fontified t) 1000 1002 (fontified t face font-lock-type-face) 1002 1007 (fontified t face font-lock-type-face) 1007 1009 (fontified t) 1009 1010 (fontified t face whitespace-tab) 1010 1011 (fontified t face whitespace-tab) 1011 1015 (fontified t face font-lock-constant-face) 1015 1046 (fontified t) 1046 1047 (fontified t face whitespace-tab) 1047 1048 (fontified t face whitespace-tab) 1048 1054 (fontified t face font-lock-constant-face) 1054 1085 (fontified t) 1085 1086 (fontified t face whitespace-tab) 1086 1087 (fontified t face whitespace-tab) 1087 1093 (fontified t face font-lock-constant-face) 1093 1124 (fontified t) 1124 1125 (fontified t face whitespace-tab) 1125 1126 (fontified t face whitespace-tab) 1126 1134 (fontified t face font-lock-constant-face) 1134 1165 (fontified t) 1165 1166 (fontified t face whitespace-tab) 1166 1168 (fontified t)) . 81) (undo-tree-id174 . -390) (undo-tree-id175 . -448) (undo-tree-id176 . -966) (undo-tree-id177 . -966) (undo-tree-id178 . -966) (undo-tree-id179 . -372) (undo-tree-id180 . -372) (undo-tree-id181 . -964) (undo-tree-id182 . -964) (undo-tree-id183 . -964) (undo-tree-id184 . -964) (undo-tree-id185 . -966) (undo-tree-id186 . -966) (undo-tree-id187 . -372) (undo-tree-id188 . -373) (undo-tree-id189 . -372) (undo-tree-id190 . -390) (t 23301 17389 108324 273000)) ((81 . 1249) (#("in-contrib/sessions\"
	goginredis \"github.com/gin-contrib/sessions/redis\"
)

type CookieConfig struct {
	CookieKey      string `json:\"cookie_key\"`
	CookiePath     string `json:\"cookie_path\"`
	CookieMaxAge   int    `json:\"cookie_max_age\"`
	CookieSecure   bool   `json:\"cookie_secure\"`
	CookieHTTPOnly bool   `json:\"cookie_http_only\"`
	SessionName    string `json:\"session_name\"`
}

var cookieConfig *CookieConfig
var sessionStore sessions.Store

func GetSessionStore() sessions.Store {
	return sessionStore
}

func GetSessionConfig() *CookieConfig {
	return cookieConfig
}

func Initialize(config *CookieConfig) {

	cookieConfig = &CookieConfig{
		CookieKey:      config.CookieKey,
		CookiePath:     config.CookiePath,
		CookieMaxAge:   config.CookieMaxAge,
		CookieSecure:   config.CookieSecure,
		CookieHTTPOnly: config.CookieHTTPOnly,
		SessionName:    config.SessionName,
	}

	createSessionStore()
}

func createSessionStore() {
	pool := redis.GetRedisPool()
	var storeErr error
	sessionStore, storeErr = goginredis.NewStoreWithPool(pool, []byte(cookieConfig.CookieKey))

	if storeErr != nil {
		panic(\"Error Creating Session Store err: \" + storeErr.Error())
	}
	sessionStore.Options(sessions.Options{
		Path:     cookieConfig.CookiePath,
		MaxAge:   cookieConfig.CookieMaxAge,
		Secure:   cookieConfig.CookieSecure,
		HttpOnly: cookieConfig.CookieHTTPOnly,
	})
" 0 20 (fontified t face font-lock-string-face) 20 21 (fontified t) 21 22 (fontified t face whitespace-tab) 22 33 (fontified t) 33 72 (fontified t face font-lock-string-face) 72 76 (fontified t) 76 80 (fontified t face font-lock-keyword-face) 80 81 (fontified t) 81 93 (fontified t face font-lock-type-face) 93 94 (fontified t) 94 100 (fontified t face font-lock-keyword-face) 100 103 (fontified t) 103 104 (fontified t face whitespace-tab) 104 126 (fontified t) 126 145 (fontified t face font-lock-string-face) 145 146 (fontified t) 146 147 (fontified t face whitespace-tab) 147 169 (fontified t) 169 189 (fontified t face font-lock-string-face) 189 190 (fontified t) 190 191 (fontified t face whitespace-tab) 191 213 (fontified t) 213 236 (fontified t face font-lock-string-face) 236 237 (fontified t) 237 238 (fontified t face whitespace-tab) 238 260 (fontified t) 260 282 (fontified t face font-lock-string-face) 282 283 (fontified t) 283 284 (fontified t face whitespace-tab) 284 306 (fontified t) 306 331 (fontified t face font-lock-string-face) 331 332 (fontified t) 332 333 (fontified t face whitespace-tab) 333 355 (fontified t) 355 376 (fontified t face font-lock-string-face) 376 380 (fontified t) 380 383 (fontified t face font-lock-keyword-face) 383 411 (fontified t) 411 414 (fontified t face font-lock-keyword-face) 414 444 (fontified t) 444 448 (fontified t face font-lock-keyword-face) 448 449 (fontified t) 449 464 (fontified t face font-lock-function-name-face) 464 467 (fontified t) 467 481 (fontified t face font-lock-type-face) 481 484 (fontified t) 484 485 (fontified t face whitespace-tab) 485 486 (fontified t face font-lock-keyword-face) 486 491 (fontified t face font-lock-keyword-face) 491 505 (fontified t) 505 508 (fontified t) 508 512 (fontified t face font-lock-keyword-face) 512 513 (fontified t) 513 529 (fontified t face font-lock-function-name-face) 529 533 (fontified t) 533 545 (fontified t face font-lock-type-face) 545 548 (fontified t) 548 549 (fontified t face whitespace-tab) 549 555 (fontified t face font-lock-keyword-face) 555 572 (fontified t) 572 576 (fontified t face font-lock-keyword-face) 576 577 (fontified t) 577 587 (fontified t face font-lock-function-name-face) 587 596 (fontified t) 596 608 (fontified t face font-lock-type-face) 608 613 (fontified t) 613 614 (fontified t face whitespace-tab) 614 630 (fontified t) 630 642 (fontified t face font-lock-type-face) 642 644 (fontified t) 644 646 (fontified t face whitespace-tab) 646 655 (fontified t face font-lock-constant-face) 655 680 (fontified t) 680 682 (fontified t face whitespace-tab) 682 692 (fontified t face font-lock-constant-face) 692 717 (fontified t) 717 719 (fontified t face whitespace-tab) 719 731 (fontified t face font-lock-constant-face) 731 756 (fontified t) 756 758 (fontified t face whitespace-tab) 758 770 (fontified t face font-lock-constant-face) 770 795 (fontified t) 795 797 (fontified t face whitespace-tab) 797 811 (fontified t face font-lock-constant-face) 811 836 (fontified t) 836 838 (fontified t face whitespace-tab) 838 849 (fontified t face font-lock-constant-face) 849 874 (fontified t) 874 875 (fontified t face whitespace-tab) 875 878 (fontified t) 878 879 (fontified t face whitespace-tab) 879 897 (fontified t face font-lock-function-name-face) 897 903 (fontified t) 903 907 (fontified t face font-lock-keyword-face) 907 908 (fontified t) 908 926 (fontified t face font-lock-function-name-face) 926 931 (fontified t) 931 932 (fontified t face whitespace-tab) 932 946 (fontified t) 946 958 (fontified t face font-lock-function-name-face) 958 961 (fontified t) 961 962 (fontified t face whitespace-tab) 962 965 (fontified t face font-lock-keyword-face) 965 981 (fontified t) 981 982 (fontified t face whitespace-tab) 982 1005 (fontified t) 1005 1018 (fontified t) 1018 1034 (fontified t face font-lock-function-name-face) 1034 1043 (fontified t) 1043 1047 (fontified t face font-lock-function-name-face) 1047 1058 (fontified t) 1058 1072 (fontified t face (-1)) 1072 1073 (fontified t) 1073 1074 (fontified t) 1074 1075 (fontified t face whitespace-tab) 1075 1077 (fontified t face font-lock-keyword-face) 1077 1090 (fontified t) 1090 1093 (fontified t face font-lock-constant-face) 1093 1096 (fontified t) 1096 1098 (fontified t face whitespace-tab) 1098 1103 (fontified t face font-lock-builtin-face) 1103 1104 (fontified t) 1104 1140 (fontified t face font-lock-string-face) 1140 1152 (fontified t) 1152 1157 (fontified t face font-lock-function-name-face) 1157 1161 (fontified t) 1161 1162 (fontified t face whitespace-tab) 1162 1164 (fontified t) 1164 1165 (fontified t face whitespace-tab) 1165 1178 (fontified t) 1178 1185 (fontified t face font-lock-function-name-face) 1185 1195 (fontified t) 1195 1202 (fontified t face font-lock-type-face) 1202 1204 (fontified t) 1204 1206 (fontified t face whitespace-tab) 1206 1210 (fontified t face font-lock-constant-face) 1210 1241 (fontified t) 1241 1243 (fontified t face whitespace-tab) 1243 1249 (fontified t face font-lock-constant-face) 1249 1280 (fontified t) 1280 1282 (fontified t face whitespace-tab) 1282 1288 (fontified t face font-lock-constant-face) 1288 1319 (fontified t) 1319 1321 (fontified t face whitespace-tab) 1321 1329 (fontified t face font-lock-constant-face) 1329 1360 (fontified t) 1360 1361 (fontified t face whitespace-tab) 1361 1364 (fontified t)) . 81)) (23301 18181 973133 0) 0 nil]) ((454 . 464) (#("Re" 0 2 (fontified t)) . -454) (undo-tree-id163 . -2) 456) ((454 . 456) (#("RedisStore" 0 10 (fontified t)) . 454)) (23301 18184 201625 0) 0 nil]) ((453 . 456)) ((#("*Re" 0 1 (fontified t) 1 3 (fontified t)) . 453) (undo-tree-id211 . -1) (undo-tree-id212 . -3) (undo-tree-id213 . -3)) (23301 18185 5095 0) 0 nil]) ((#("sessions.Store" 0 14 (fontified t)) . -453) (undo-tree-id164 . -9) (undo-tree-id165 . -9) (undo-tree-id166 . -14) (undo-tree-id167 . -14) 467 (t 23301 17316 236644 919000)) ((453 . 467)) (23301 18186 192901 0) 0 nil] [nil ([nil ([nil nil ((1049 . 1050)) ((#("	" 0 1 (fontified t face whitespace-tab)) . 1049) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1)) (23301 17349 643270 0) 0 nil]) ((#("	" 0 1 (fontified t face whitespace-trailing)) . 1049) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1)) ((1049 . 1050)) (23301 17349 643458 0) 0 nil]) ((#("sessionStore.SetOptions(&sessions.Options{
		Path:     cookieConfig.CookiePath,
		MaxAge:   cookieConfig.CookieMaxAge,
		Secure:   cookieConfig.CookieSecure,
		HttpOnly: cookieConfig.CookieHTTPOnly,
	})" 0 13 (fontified t) 13 23 (fontified t face font-lock-function-name-face) 23 34 (fontified t) 34 36 (fontified t face font-lock-type-face) 36 41 (fontified t face font-lock-type-face) 41 43 (fontified t) 43 44 (fontified t face whitespace-tab) 44 45 (fontified t face whitespace-tab) 45 49 (fontified t face font-lock-constant-face) 49 80 (fontified t) 80 81 (fontified t face whitespace-tab) 81 82 (fontified t face whitespace-tab) 82 88 (fontified t face font-lock-constant-face) 88 119 (fontified t) 119 120 (fontified t face whitespace-tab) 120 121 (fontified t face whitespace-tab) 121 127 (fontified t face font-lock-constant-face) 127 158 (fontified t) 158 159 (fontified t face whitespace-tab) 159 160 (fontified t face whitespace-tab) 160 168 (fontified t face font-lock-constant-face) 168 199 (fontified t) 199 200 (fontified t face whitespace-tab) 200 202 (fontified t)) . -1050) (undo-tree-id149 . -202) (undo-tree-id150 . -202) (undo-tree-id151 . -202) (undo-tree-id152 . -42) (undo-tree-id153 . -202) (undo-tree-id154 . -202) (undo-tree-id155 . 1) (undo-tree-id156 . -202) (undo-tree-id157 . 179) (undo-tree-id158 . -24) 1252 (t 23301 17316 236644 919000)) ((1050 . 1252)) (23301 17349 939036 0) 0 nil]) ((1074 . 1075) (t 23301 17310 730886 192000)) nil (23301 18238 249247 0) 0 nil]) ((#("	\"github.com/boj/redistore\"
" 0 1 (fontified t face whitespace-tab) 1 27 (fontified t face font-lock-string-face) 27 28 (fontified t)) . -67) 1119) nil (23301 17310 723773 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -1076) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) 1077) nil (23301 17310 723824 0) 0 nil]) ((#("	sessionStore, _ = redistore.NewRediStoreWithPool()" 0 1 (fontified t face whitespace-tab) 1 29 (fontified t) 29 49 (fontified t face font-lock-function-name-face) 49 51 (fontified t)) . 1077) (undo-tree-id131 . -51) (undo-tree-id132 . -29) (undo-tree-id133 . -49) (undo-tree-id134 . -51) (undo-tree-id135 . 1) (undo-tree-id136 . -51) (undo-tree-id137 . 2) (undo-tree-id138 . -50) (undo-tree-id139 . -51) (t 23301 17302 881362 142000)) nil (23301 17310 723866 0) 0 nil]) ((1077 . 1129) (#("	sessionStore,_ = redistore.NewRediStoreWithPool()
" 0 1 (fontified t face whitespace-tab) 1 22 (fontified t) 22 28 (fontified t) 28 48 (fontified t face font-lock-function-name-face) 48 50 (fontified t) 50 51 (fontified t)) . -1077) (undo-tree-id0 . -51) (undo-tree-id1 . -50) (undo-tree-id2 . -50) (undo-tree-id3 . -51) (95 . 126) (#("	\"github.com/gorilla/sessions\"
" 0 1 (fontified t face whitespace-tab) 1 14 (fontified t face font-lock-string-face) 14 30 (fontified t face font-lock-string-face) 30 31 (fontified t)) . -67) (undo-tree-id4 . -14) (undo-tree-id5 . -14) (undo-tree-id6 . -14) (undo-tree-id7 . -14) (undo-tree-id8 . -14) (undo-tree-id9 . -14) (undo-tree-id10 . -14) (undo-tree-id11 . -14) (undo-tree-id12 . -14) (undo-tree-id13 . -14) (undo-tree-id14 . -14) (undo-tree-id15 . -14) (undo-tree-id16 . -14) (undo-tree-id17 . -14) (undo-tree-id18 . -14) (undo-tree-id19 . -14) (undo-tree-id20 . -14) (undo-tree-id21 . -14) (undo-tree-id22 . -14) (undo-tree-id23 . -14) (undo-tree-id24 . -14) (undo-tree-id25 . -14) (undo-tree-id26 . -14) (undo-tree-id27 . -14) (undo-tree-id28 . -14) (undo-tree-id29 . -14) (undo-tree-id30 . -14) (undo-tree-id31 . -14) (undo-tree-id32 . -14) (undo-tree-id33 . -14) (undo-tree-id34 . -14) 1330) nil (23301 17302 871750 0) 0 nil]) ((#("//" 0 2 (fontified t face font-lock-comment-delimiter-face)) . -1328) (#("//" 0 2 (fontified t face font-lock-comment-delimiter-face)) . -1287) (#("//" 0 2 (fontified t face font-lock-comment-delimiter-face)) . -1248) (#("//" 0 2 (fontified t face font-lock-comment-delimiter-face)) . -1209) (#("//" 0 2 (fontified t face font-lock-comment-delimiter-face)) . -1172) (#("//" 0 2 (fontified t face font-lock-comment-delimiter-face)) . -1129)) nil (23301 17302 871762 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -1127) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 1128) nil (23301 17302 871773 0) 0 nil]) ((#("	" 0 1 (fontified t face whitespace-trailing)) . 1128) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1)) nil (23301 17302 871785 0) 0 nil]) ((#("/" 0 1 (fontified t)) . -1010) (undo-tree-id41 . -1) (#("/" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -1011) (undo-tree-id42 . -1) 1012 (t 23301 17024 387940 568000)) nil (23301 17302 871801 0) 0 nil]) ((81 . 1346) (#("in-contrib/sessions\"
	goginredis \"github.com/gin-contrib/sessions/redis\"
)

type CookieConfig struct {
	CookieKey      string `json:\"cookie_key\"`
	CookiePath     string `json:\"cookie_path\"`
	CookieMaxAge   int    `json:\"cookie_max_age\"`
	CookieSecure   bool   `json:\"cookie_secure\"`
	CookieHTTPOnly bool   `json:\"cookie_http_only\"`
	SessionName    string `json:\"session_name\"`
}

var cookieConfig *CookieConfig
var sessionStore sessions.Store

func GetSessionStore() sessions.Store {
	return sessionStore
}

func GetSessionConfig() *CookieConfig {
	return cookieConfig
}

func Initialize(config *CookieConfig) {

	cookieConfig = &CookieConfig{
		CookieKey:      config.CookieKey,
		CookiePath:     config.CookiePath,
		CookieMaxAge:   config.CookieMaxAge,
		CookieSecure:   config.CookieSecure,
		CookieHTTPOnly: config.CookieHTTPOnly,
		SessionName:    config.SessionName,
	}

	createSessionStore()
}

func createSessionStore() {
	pool := redis.GetRedisPool()
	var storeErr error
	sessionStore, storeErr = goginredis.NewStoreWithPool(pool, []byte(cookieConfig.CookieKey))

	if storeErr != nil {
		panic(\"Error Creating Session Store err: \" + store
			Err.Error())
	}
	sessionStore.Options(sessions.Options{
		Path:     cookieConfig.CookiePath,
		MaxAge:   cookieConfig.CookieMaxAge,
		Secure:   cookieConfig.CookieSecure,
		HttpOnly: cookieConfig.CookieHTTPOnly,
	})
" 0 20 (fontified t face font-lock-string-face) 20 21 (fontified t) 21 22 (fontified t face whitespace-tab) 22 33 (fontified t) 33 72 (fontified t face font-lock-string-face) 72 76 (fontified t) 76 80 (fontified t face font-lock-keyword-face) 80 81 (fontified t) 81 93 (fontified t face font-lock-type-face) 93 94 (fontified t) 94 100 (fontified t face font-lock-keyword-face) 100 103 (fontified t) 103 104 (fontified t face whitespace-tab) 104 126 (fontified t) 126 145 (fontified t face font-lock-string-face) 145 146 (fontified t) 146 147 (fontified t face whitespace-tab) 147 169 (fontified t) 169 189 (fontified t face font-lock-string-face) 189 190 (fontified t) 190 191 (fontified t face whitespace-tab) 191 213 (fontified t) 213 236 (fontified t face font-lock-string-face) 236 237 (fontified t) 237 238 (fontified t face whitespace-tab) 238 260 (fontified t) 260 282 (fontified t face font-lock-string-face) 282 283 (fontified t) 283 284 (fontified t face whitespace-tab) 284 306 (fontified t) 306 331 (fontified t face font-lock-string-face) 331 332 (fontified t) 332 333 (fontified t face whitespace-tab) 333 355 (fontified t) 355 376 (fontified t face font-lock-string-face) 376 380 (fontified t) 380 383 (fontified t face font-lock-keyword-face) 383 411 (fontified t) 411 414 (fontified t face font-lock-keyword-face) 414 444 (fontified t) 444 448 (fontified t face font-lock-keyword-face) 448 449 (fontified t) 449 464 (fontified t face font-lock-function-name-face) 464 467 (fontified t) 467 481 (fontified t face font-lock-type-face) 481 484 (fontified t) 484 485 (fontified t face whitespace-tab) 485 486 (fontified t face font-lock-keyword-face) 486 491 (fontified t face font-lock-keyword-face) 491 505 (fontified t) 505 508 (fontified t) 508 512 (fontified t face font-lock-keyword-face) 512 513 (fontified t) 513 529 (fontified t face font-lock-function-name-face) 529 533 (fontified t) 533 545 (fontified t face font-lock-type-face) 545 548 (fontified t) 548 549 (fontified t face whitespace-tab) 549 555 (fontified t face font-lock-keyword-face) 555 572 (fontified t) 572 576 (fontified t face font-lock-keyword-face) 576 577 (fontified t) 577 587 (fontified t face font-lock-function-name-face) 587 596 (fontified t) 596 608 (fontified t face font-lock-type-face) 608 613 (fontified t) 613 614 (fontified t face whitespace-tab) 614 630 (fontified t) 630 642 (fontified t face font-lock-type-face) 642 644 (fontified t) 644 646 (fontified t face whitespace-tab) 646 655 (fontified t face font-lock-constant-face) 655 680 (fontified t) 680 682 (fontified t face whitespace-tab) 682 692 (fontified t face font-lock-constant-face) 692 717 (fontified t) 717 719 (fontified t face whitespace-tab) 719 731 (fontified t face font-lock-constant-face) 731 756 (fontified t) 756 758 (fontified t face whitespace-tab) 758 770 (fontified t face font-lock-constant-face) 770 795 (fontified t) 795 797 (fontified t face whitespace-tab) 797 811 (fontified t face font-lock-constant-face) 811 836 (fontified t) 836 838 (fontified t face whitespace-tab) 838 849 (fontified t face font-lock-constant-face) 849 874 (fontified t) 874 875 (fontified t face whitespace-tab) 875 878 (fontified t) 878 879 (fontified t face whitespace-tab) 879 897 (fontified t face font-lock-function-name-face) 897 903 (fontified t) 903 907 (fontified t face font-lock-keyword-face) 907 908 (fontified t) 908 926 (fontified t face font-lock-function-name-face) 926 931 (fontified t) 931 932 (fontified t face whitespace-tab) 932 946 (fontified t) 946 958 (fontified t face font-lock-function-name-face) 958 961 (fontified t) 961 962 (fontified t face whitespace-tab) 962 965 (fontified t face font-lock-keyword-face) 965 981 (fontified t) 981 982 (fontified t face whitespace-tab) 982 1005 (fontified t) 1005 1018 (fontified t) 1018 1034 (fontified t face font-lock-function-name-face) 1034 1043 (fontified t) 1043 1047 (fontified t face font-lock-function-name-face) 1047 1058 (fontified t) 1058 1072 (fontified t face (-1)) 1072 1073 (fontified t) 1073 1074 (fontified t) 1074 1075 (fontified t face whitespace-tab) 1075 1077 (fontified t face font-lock-keyword-face) 1077 1090 (fontified t) 1090 1093 (fontified t face font-lock-constant-face) 1093 1096 (fontified t) 1096 1098 (fontified t face whitespace-tab) 1098 1103 (fontified t face font-lock-builtin-face) 1103 1104 (fontified t) 1104 1140 (fontified t face font-lock-string-face) 1140 1149 (fontified t) 1149 1152 (fontified t face whitespace-tab) 1152 1156 (fontified t) 1156 1161 (fontified t face font-lock-function-name-face) 1161 1165 (fontified t) 1165 1166 (fontified t face whitespace-tab) 1166 1168 (fontified t) 1168 1169 (fontified t face whitespace-tab) 1169 1182 (fontified t) 1182 1189 (fontified t face font-lock-function-name-face) 1189 1199 (fontified t) 1199 1206 (fontified t face font-lock-type-face) 1206 1208 (fontified t) 1208 1210 (fontified t face whitespace-tab) 1210 1214 (fontified t face font-lock-constant-face) 1214 1245 (fontified t) 1245 1247 (fontified t face whitespace-tab) 1247 1253 (fontified t face font-lock-constant-face) 1253 1284 (fontified t) 1284 1286 (fontified t face whitespace-tab) 1286 1292 (fontified t face font-lock-constant-face) 1292 1323 (fontified t) 1323 1325 (fontified t face whitespace-tab) 1325 1333 (fontified t face font-lock-constant-face) 1333 1364 (fontified t) 1364 1365 (fontified t face whitespace-tab) 1365 1368 (fontified t)) . 81) (undo-tree-id43 . -1095) (undo-tree-id44 . -901) (undo-tree-id45 . -1095) (undo-tree-id46 . -1074) (undo-tree-id47 . -569) (undo-tree-id48 . -1095) (undo-tree-id49 . -1095)) nil (23301 17302 871820 0) 0 nil]) ((1229 . 1233) (t 23301 16936 706122 382000)) nil (23301 17302 871824 0) 0 nil]) ((81 . 1445) (#("orilla/sessions\"
	\"github.com/boj/redistore\"
)

type CookieConfig struct {
	CookieKey      string `json:\"cookie_key\"`
	CookiePath     string `json:\"cookie_path\"`
	CookieMaxAge   int    `json:\"cookie_max_age\"`
	CookieSecure   bool   `json:\"cookie_secure\"`
	CookieHTTPOnly bool   `json:\"cookie_http_only\"`
	SessionName    string `json:\"session_name\"`
}

var cookieConfig *CookieConfig
var sessionStore sessions.Store

func GetSessionStore() sessions.Store {
	return sessionStore
}

func GetSessionConfig() *CookieConfig {
	return cookieConfig
}

func Initialize(config *CookieConfig) {

	cookieConfig = &CookieConfig{
		CookieKey:      config.CookieKey,
		CookiePath:     config.CookiePath,
		CookieMaxAge:   config.CookieMaxAge,
		CookieSecure:   config.CookieSecure,
		CookieHTTPOnly: config.CookieHTTPOnly,
		SessionName:    config.SessionName,
	}

	createSessionStore()
}

func createSessionStore() {
	conn := redis.GetConn()
	//sessionStore = NewRedisStore(conn, []byte(cookieConfig.CookieKey))
	sessionStore,_ = redistore.NewRediStoreWithPool()
	
	//sessionStore.SetOptions(sessions.Options{
	//	Path:     cookieConfig.CookiePath,
	//	MaxAge:   cookieConfig.CookieMaxAge,
	//	Secure:   cookieConfig.CookieSecure,
	//	HttpOnly: cookieConfig.CookieHTTPOnly,
	//})" 0 16 (fontified t face font-lock-string-face) 16 17 (fontified t) 17 18 (fontified t face whitespace-tab) 18 44 (fontified t face font-lock-string-face) 44 48 (fontified t) 48 52 (fontified t face font-lock-keyword-face) 52 53 (fontified t) 53 65 (fontified t face font-lock-type-face) 65 66 (fontified t) 66 72 (fontified t face font-lock-keyword-face) 72 75 (fontified t) 75 76 (fontified t face whitespace-tab) 76 98 (fontified t) 98 117 (fontified t face font-lock-string-face) 117 118 (fontified t) 118 119 (fontified t face whitespace-tab) 119 141 (fontified t) 141 161 (fontified t face font-lock-string-face) 161 162 (fontified t) 162 163 (fontified t face whitespace-tab) 163 185 (fontified t) 185 208 (fontified t face font-lock-string-face) 208 209 (fontified t) 209 210 (fontified t face whitespace-tab) 210 232 (fontified t) 232 254 (fontified t face font-lock-string-face) 254 255 (fontified t) 255 256 (fontified t face whitespace-tab) 256 278 (fontified t) 278 303 (fontified t face font-lock-string-face) 303 304 (fontified t) 304 305 (fontified t face whitespace-tab) 305 327 (fontified t) 327 348 (fontified t face font-lock-string-face) 348 352 (fontified t) 352 355 (fontified t face font-lock-keyword-face) 355 383 (fontified t) 383 386 (fontified t face font-lock-keyword-face) 386 416 (fontified t) 416 420 (fontified t face font-lock-keyword-face) 420 421 (fontified t) 421 436 (fontified t face font-lock-function-name-face) 436 439 (fontified t) 439 453 (fontified t face font-lock-type-face) 453 456 (fontified t) 456 457 (fontified t face whitespace-tab) 457 463 (fontified t face font-lock-keyword-face) 463 480 (fontified t) 480 484 (fontified t face font-lock-keyword-face) 484 485 (fontified t) 485 501 (fontified t face font-lock-function-name-face) 501 505 (fontified t) 505 517 (fontified t face font-lock-type-face) 517 520 (fontified t) 520 521 (fontified t face whitespace-tab) 521 527 (fontified t face font-lock-keyword-face) 527 544 (fontified t) 544 548 (fontified t face font-lock-keyword-face) 548 549 (fontified t) 549 559 (fontified t face font-lock-function-name-face) 559 568 (fontified t) 568 580 (fontified t face font-lock-type-face) 580 585 (fontified t) 585 586 (fontified t face whitespace-tab) 586 602 (fontified t) 602 614 (fontified t face font-lock-type-face) 614 616 (fontified t) 616 618 (fontified t face whitespace-tab) 618 627 (fontified t face font-lock-constant-face) 627 652 (fontified t) 652 654 (fontified t face whitespace-tab) 654 664 (fontified t face font-lock-constant-face) 664 689 (fontified t) 689 691 (fontified t face whitespace-tab) 691 703 (fontified t face font-lock-constant-face) 703 728 (fontified t) 728 730 (fontified t face whitespace-tab) 730 742 (fontified t face font-lock-constant-face) 742 767 (fontified t) 767 769 (fontified t face whitespace-tab) 769 783 (fontified t face font-lock-constant-face) 783 808 (fontified t) 808 810 (fontified t face whitespace-tab) 810 821 (fontified t face font-lock-constant-face) 821 846 (fontified t) 846 847 (fontified t face whitespace-tab) 847 850 (fontified t) 850 851 (fontified t face whitespace-tab) 851 869 (fontified t face font-lock-function-name-face) 869 875 (fontified t) 875 879 (fontified t face font-lock-keyword-face) 879 880 (fontified t) 880 898 (fontified t face font-lock-function-name-face) 898 903 (fontified t) 903 904 (fontified t face whitespace-tab) 904 918 (fontified t) 918 925 (fontified t face font-lock-function-name-face) 925 928 (fontified t) 928 929 (fontified t face whitespace-tab) 929 931 (fontified t face font-lock-comment-delimiter-face) 931 998 (fontified t face font-lock-comment-face) 998 999 (fontified t face whitespace-tab) 999 1026 (fontified t) 1026 1046 (fontified t face font-lock-function-name-face) 1046 1049 (fontified t) 1049 1050 (fontified t face whitespace-trailing) 1050 1051 (fontified t) 1051 1052 (fontified t face whitespace-tab) 1052 1054 (fontified t face font-lock-comment-delimiter-face) 1054 1096 (fontified t face font-lock-comment-face) 1096 1097 (fontified t face whitespace-tab) 1097 1099 (fontified t face font-lock-comment-delimiter-face) 1099 1100 (fontified t face whitespace-tab) 1100 1135 (fontified t face font-lock-comment-face) 1135 1136 (fontified t face whitespace-tab) 1136 1138 (fontified t face font-lock-comment-delimiter-face) 1138 1139 (fontified t face whitespace-tab) 1139 1176 (fontified t face font-lock-comment-face) 1176 1177 (fontified t face whitespace-tab) 1177 1179 (fontified t face font-lock-comment-delimiter-face) 1179 1180 (fontified t face whitespace-tab) 1180 1217 (fontified t face font-lock-comment-face) 1217 1218 (fontified t face whitespace-tab) 1218 1220 (fontified t face font-lock-comment-delimiter-face) 1220 1221 (fontified t face whitespace-tab) 1221 1260 (fontified t face font-lock-comment-face) 1260 1261 (fontified t face whitespace-tab) 1261 1263 (fontified t face font-lock-comment-delimiter-face) 1263 1265 (fontified t face font-lock-comment-face)) . 81) (undo-tree-id50 . -17) (undo-tree-id51 . -17) (undo-tree-id52 . -17) (undo-tree-id53 . -17) (undo-tree-id54 . -17) (undo-tree-id55 . -17) (undo-tree-id56 . -17) (undo-tree-id57 . -17) (undo-tree-id58 . -17) (undo-tree-id59 . -17) (undo-tree-id60 . -17) (undo-tree-id61 . -17) (undo-tree-id62 . -17) (undo-tree-id63 . -17) (undo-tree-id64 . -17) (undo-tree-id65 . -17) (undo-tree-id66 . -17) (undo-tree-id67 . -17) (undo-tree-id68 . -17) (undo-tree-id69 . -17) (undo-tree-id70 . -17) (undo-tree-id71 . -17) (undo-tree-id72 . -17) (undo-tree-id73 . -17) (undo-tree-id74 . -17) (undo-tree-id75 . -17) (undo-tree-id76 . -17) (undo-tree-id77 . -17) (undo-tree-id78 . -17) (undo-tree-id79 . -17) (undo-tree-id80 . -987) (undo-tree-id81 . -1065) (undo-tree-id82 . -17) (undo-tree-id83 . -17) (undo-tree-id84 . -17) (t 23301 16931 49635 59000) (1010 . 1131) (#("sessionStore = NewRedisStore(conn, []byte(cookieConfig.CookieKey))
	sessionStore = redistore.NewRediStoreWithPool()" 0 15 (fontified t) 15 28 (fontified t face font-lock-function-name-face) 28 37 (fontified t) 37 41 (fontified t face font-lock-function-name-face) 41 67 (fontified t) 67 68 (fontified t face whitespace-tab) 68 91 (fontified t) 91 93 (fontified t) 93 113 (fontified t face font-lock-function-name-face) 113 115 (fontified t)) . 1010) (undo-tree-id85 . -56) 1140 (t 23301 16904 876032 165000)) nil (23301 17302 871953 0) 0 nil]) ((98 . 1338) (#(")

type CookieConfig struct {
	CookieKey      string `json:\"cookie_key\"`
	CookiePath     string `json:\"cookie_path\"`
	CookieMaxAge   int    `json:\"cookie_max_age\"`
	CookieSecure   bool   `json:\"cookie_secure\"`
	CookieHTTPOnly bool   `json:\"cookie_http_only\"`
	SessionName    string `json:\"session_name\"`
}

var cookieConfig *CookieConfig
var sessionStore sessions.Store

func GetSessionStore() sessions.Store {
	return sessionStore
}

func GetSessionConfig() *CookieConfig {
	return cookieConfig
}

func Initialize(config *CookieConfig) {

	cookieConfig = &CookieConfig{
		CookieKey:      config.CookieKey,
		CookiePath:     config.CookiePath,
		CookieMaxAge:   config.CookieMaxAge,
		CookieSecure:   config.CookieSecure,
		CookieHTTPOnly: config.CookieHTTPOnly,
		SessionName:    config.SessionName,
	}

	createSessionStore()
}

func createSessionStore() {
	conn := redis.GetConn()
	sessionStore = NewRedisStore(conn, []byte(cookieConfig.CookieKey))
	sessionStore.SetOptions(sessions.Options{
		Path:     cookieConfig.CookiePath,
		MaxAge:   cookieConfig.CookieMaxAge,
		Secure:   cookieConfig.CookieSecure,
		HttpOnly: cookieConfig.CookieHTTPOnly,
	" 0 2 (fontified t) 2 3 (fontified t) 3 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 20 (fontified t face font-lock-type-face) 20 21 (fontified t) 21 27 (fontified t face font-lock-keyword-face) 27 30 (fontified t) 30 31 (fontified t face whitespace-tab) 31 53 (fontified t) 53 72 (fontified t face font-lock-string-face) 72 73 (fontified t) 73 74 (fontified t face whitespace-tab) 74 96 (fontified t) 96 116 (fontified t face font-lock-string-face) 116 117 (fontified t) 117 118 (fontified t face whitespace-tab) 118 140 (fontified t) 140 163 (fontified t face font-lock-string-face) 163 164 (fontified t) 164 165 (fontified t face whitespace-tab) 165 187 (fontified t) 187 209 (fontified t face font-lock-string-face) 209 210 (fontified t) 210 211 (fontified t face whitespace-tab) 211 233 (fontified t) 233 258 (fontified t face font-lock-string-face) 258 259 (fontified t) 259 260 (fontified t face whitespace-tab) 260 282 (fontified t) 282 303 (fontified t face font-lock-string-face) 303 307 (fontified t) 307 310 (fontified t face font-lock-keyword-face) 310 338 (fontified t) 338 341 (fontified t face font-lock-keyword-face) 341 342 (fontified t) 342 347 (fontified t) 347 354 (fontified t) 354 364 (fontified t) 364 369 (fontified t) 369 370 (fontified t) 370 371 (fontified t) 371 375 (fontified t face font-lock-keyword-face) 375 376 (fontified t) 376 391 (fontified t face font-lock-function-name-face) 391 394 (fontified t) 394 408 (fontified t face font-lock-type-face) 408 411 (fontified t) 411 412 (fontified t face whitespace-tab) 412 418 (fontified t face font-lock-keyword-face) 418 435 (fontified t) 435 439 (fontified t face font-lock-keyword-face) 439 440 (fontified t) 440 456 (fontified t face font-lock-function-name-face) 456 460 (fontified t) 460 472 (fontified t face font-lock-type-face) 472 475 (fontified t) 475 476 (fontified t face whitespace-tab) 476 482 (fontified t face font-lock-keyword-face) 482 495 (fontified t) 495 496 (fontified t) 496 499 (fontified t) 499 502 (fontified t face font-lock-keyword-face) 502 503 (fontified t face font-lock-keyword-face) 503 504 (fontified t) 504 514 (fontified t face font-lock-function-name-face) 514 523 (fontified t) 523 535 (fontified t face font-lock-type-face) 535 539 (fontified t) 539 540 (fontified t) 540 541 (fontified t face whitespace-tab) 541 557 (fontified t) 557 569 (fontified t face font-lock-type-face) 569 571 (fontified t) 571 573 (fontified t face whitespace-tab) 573 582 (fontified t face font-lock-constant-face) 582 607 (fontified t) 607 609 (fontified t face whitespace-tab) 609 619 (fontified t face font-lock-constant-face) 619 644 (fontified t) 644 646 (fontified t face whitespace-tab) 646 658 (fontified t face font-lock-constant-face) 658 683 (fontified t) 683 685 (fontified t face whitespace-tab) 685 697 (fontified t face font-lock-constant-face) 697 722 (fontified t) 722 724 (fontified t face whitespace-tab) 724 738 (fontified t face font-lock-constant-face) 738 763 (fontified t) 763 765 (fontified t face whitespace-tab) 765 776 (fontified t face font-lock-constant-face) 776 801 (fontified t) 801 802 (fontified t face whitespace-tab) 802 805 (fontified t) 805 806 (fontified t face whitespace-tab) 806 824 (fontified t face font-lock-function-name-face) 824 830 (fontified t) 830 834 (fontified t face font-lock-keyword-face) 834 835 (fontified t) 835 853 (fontified t face font-lock-function-name-face) 853 858 (fontified t) 858 859 (fontified t face whitespace-tab) 859 863 (fontified t) 863 870 (fontified t) 870 873 (fontified t) 873 880 (face font-lock-function-name-face fontified t) 880 881 (fontified t) 881 882 (fontified t) 882 883 (fontified t) 883 884 (fontified t face whitespace-tab) 884 899 (fontified t) 899 912 (fontified t face font-lock-function-name-face) 912 919 (fontified t) 919 921 (magit-section #8=[eieio-class-tag--magit-hunk-section hunk ("func Initialize(config *CookieConfig) {" "-41,18" "+40,12") #<marker (moves after insertion) in no buffer> #<marker in no buffer> #<marker in no buffer> nil nil nil #3=[eieio-class-tag--magit-file-section file "common/middlewares/session/session.go" #<marker (moves after insertion) in no buffer> #<marker in no buffer> #<marker in no buffer> nil nil nil #1=[eieio-class-tag--magit-section diffbuf nil #<marker (moves after insertion) in no buffer> nil #<marker in no buffer> nil nil nil nil (#2=[eieio-class-tag--magit-section diffstat nil #<marker (moves after insertion) in no buffer> #<marker in no buffer> #<marker in no buffer> nil nil nil #1# ([eieio-class-tag--magit-file-section file "common/middlewares/session/session.go" #<marker (moves after insertion) in no buffer> nil #<marker in no buffer> nil nil nil #2# nil nil nil] [eieio-class-tag--magit-file-section file "common/redis/cluster.go" #<marker (moves after insertion) in no buffer> nil #<marker in no buffer> nil nil nil #2# nil nil nil] [eieio-class-tag--magit-file-section file "common/redis/utils.go" #<marker (moves after insertion) in no buffer> nil #<marker in no buffer> nil nil nil #2# nil nil nil] [eieio-class-tag--magit-file-section file "glide.lock" #<marker (moves after insertion) in no buffer> nil #<marker in no buffer> nil nil nil #2# nil nil nil] [eieio-class-tag--magit-file-section file "glide.yaml" #<marker (moves after insertion) in no buffer> nil #<marker in no buffer> nil nil nil #2# nil nil nil])] #3# #4=[eieio-class-tag--magit-file-section file "common/redis/cluster.go" #<marker (moves after insertion) in no buffer> #<marker in no buffer> #<marker in no buffer> nil nil nil #1# ([eieio-class-tag--magit-hunk-section hunk ("func InitializeRedisCluster() error {" "-21,3" "+21,7") #<marker (moves after insertion) in no buffer> #<marker in no buffer> #<marker in no buffer> nil nil nil #4# nil nil]) nil "diff --git common/redis/cluster.go common/redis/cluster.go
index 41c075e..e0dc5c3 100644
--- common/redis/cluster.go
+++ common/redis/cluster.go
"] #5=[eieio-class-tag--magit-file-section file "common/redis/utils.go" #<marker (moves after insertion) in no buffer> #<marker in no buffer> #<marker in no buffer> nil nil nil #1# ([eieio-class-tag--magit-hunk-section hunk ("package redis" "-2,6" "+2,7") #<marker (moves after insertion) in no buffer> #<marker in no buffer> #<marker in no buffer> nil nil nil #5# nil nil] [eieio-class-tag--magit-hunk-section hunk ("func Set(key string, value []byte) error {" "-34,6" "+35,19") #<marker (moves after insertion) in no buffer> #<marker in no buffer> #<marker in no buffer> nil nil nil #5# nil nil] [eieio-class-tag--magit-hunk-section hunk ("func HSET(key, field string, value []byte) error {" "-80,7" "+94,7") #<marker (moves after insertion) in no buffer> #<marker in no buffer> #<marker in no buffer> nil nil nil #5# nil nil]) nil "diff --git common/redis/utils.go common/redis/utils.go
index 4d721dd..74d562c 100644
--- common/redis/utils.go
+++ common/redis/utils.go
"] #6=[eieio-class-tag--magit-file-section file "glide.lock" #<marker (moves after insertion) in no buffer> #<marker in no buffer> #<marker in no buffer> nil nil nil #1# ([eieio-class-tag--magit-hunk-section hunk (nil "-1,5" "+1,5") #<marker (moves after insertion) in no buffer> #<marker in no buffer> #<marker in no buffer> nil nil nil #6# nil nil] [eieio-class-tag--magit-hunk-section hunk ("imports:" "-24,15" "+24,15") #<marker (moves after insertion) in no buffer> #<marker in no buffer> #<marker in no buffer> nil nil nil #6# nil nil] [eieio-class-tag--magit-hunk-section hunk ("imports:" "-54,11" "+54,11") #<marker (moves after insertion) in no buffer> #<marker in no buffer> #<marker in no buffer> nil nil nil #6# nil nil]) nil "diff --git glide.lock glide.lock
index 9a08346..eb423a7 100644
--- glide.lock
+++ glide.lock
"] #7=[eieio-class-tag--magit-file-section file "glide.yaml" #<marker (moves after insertion) in no buffer> #<marker in no buffer> #<marker in no buffer> nil nil nil #1# ([eieio-class-tag--magit-hunk-section hunk ("import:" "-8,8" "+8,8") #<marker (moves after insertion) in no buffer> #<marker in no buffer> #<marker in no buffer> nil nil nil #7# nil nil]) nil "diff --git glide.yaml glide.yaml
index dac5bbc..f782002 100644
--- glide.yaml
+++ glide.yaml
"])] ([eieio-class-tag--magit-hunk-section hunk ("package session" "-2,8" "+2,7") #<marker (moves after insertion) in no buffer> #<marker in no buffer> #<marker in no buffer> nil nil nil #3# nil nil] [eieio-class-tag--magit-hunk-section hunk ("type CookieConfig struct {" "-16,7" "+15,7") #<marker (moves after insertion) in no buffer> #<marker in no buffer> #<marker in no buffer> nil nil nil #3# nil nil] #8#) nil "diff --git common/middlewares/session/session.go common/middlewares/session/session.go
index e4d0f03..c5b2d61 100644
--- common/middlewares/session/session.go
+++ common/middlewares/session/session.go
"] nil nil] fontified t) 921 925 (magit-section #8# fontified t face font-lock-function-name-face) 925 948 (magit-section #8# fontified t) 948 949 (magit-section #8# rear-nonsticky t fontified t) 949 951 (fontified t) 951 952 (fontified t face whitespace-tab) 952 964 (fontified t) 964 965 (fontified t) 965 968 (fontified t face font-lock-function-name-face) 968 975 (fontified t face font-lock-function-name-face) 975 985 (fontified t) 985 992 (fontified t face font-lock-type-face) 992 994 (fontified t) 994 996 (fontified t face whitespace-tab) 996 1000 (fontified t face font-lock-constant-face) 1000 1031 (fontified t) 1031 1033 (fontified t face whitespace-tab) 1033 1039 (fontified t face font-lock-constant-face) 1039 1052 (fontified t) 1052 1060 (fontified t) 1060 1070 (fontified t) 1070 1072 (fontified t face whitespace-tab) 1072 1078 (fontified t face font-lock-constant-face) 1078 1082 (fontified t) 1082 1109 (fontified t) 1109 1111 (fontified t face whitespace-tab) 1111 1119 (fontified t face font-lock-constant-face) 1119 1150 (fontified t) 1150 1151 (fontified t face whitespace-tab)) . 98) (undo-tree-id86 . -899) (undo-tree-id87 . -2) (undo-tree-id88 . -835) (undo-tree-id89 . -883) (undo-tree-id90 . -857) (undo-tree-id91 . -899) (undo-tree-id92 . -835) (undo-tree-id93 . -899) (undo-tree-id94 . -883) (undo-tree-id95 . -873) (undo-tree-id96 . -899) (undo-tree-id97 . -919) (undo-tree-id98 . -970) (undo-tree-id99 . -965) (undo-tree-id100 . -971) (undo-tree-id101 . -905) (undo-tree-id102 . -376) (undo-tree-id103 . -364) (undo-tree-id104 . -368) (undo-tree-id105 . -981) (undo-tree-id106 . -981) (undo-tree-id107 . -981) (undo-tree-id108 . -981) (undo-tree-id109 . -981) (undo-tree-id110 . -981) (undo-tree-id111 . -981) (undo-tree-id112 . -981) (undo-tree-id113 . -899) (undo-tree-id114 . -899) (undo-tree-id115 . -899) (undo-tree-id116 . -899) (undo-tree-id117 . -968) (undo-tree-id118 . -965) (undo-tree-id119 . -965) (undo-tree-id120 . -952) 1106 (t 23301 16807 337208 389000)) nil (23301 17302 872016 0) 0 nil]) ((1063 . 1066) (t 23301 16714 500599 139000)) nil (23301 16807 331658 0) 0 nil] [nil ([nil ([nil nil ((#("S" 0 1 (fontified nil face font-lock-function-name-face)) . 1078) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (1066 . 1078) 1067) ((#("sessionStore" 0 12 (fontified nil face font-lock-function-name-face)) . 1066) (undo-tree-id264 . -12) (1078 . 1079)) (23301 16804 242162 0) 0 nil]) ((1066 . 1067)) ((#("S" 0 1 (fontified t face font-lock-function-name-face)) . 1066) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1)) (23301 16804 242346 0) 0 nil]) ((1063 . 1066) (t 23301 16714 500599 139000)) ((#("
		" 0 1 (fontified t) 1 3 (fontified t face whitespace-tab)) . 1063) (undo-tree-id270 . -3) (undo-tree-id271 . -3) (undo-tree-id272 . -3) (undo-tree-id273 . -3) (undo-tree-id274 . -3) (undo-tree-id275 . -3) (undo-tree-id276 . -3) (undo-tree-id277 . -3) (undo-tree-id278 . -3)) (23301 16804 598304 0) 0 nil]) ((#("S" 0 1 (fontified t face font-lock-function-name-face)) . -1063) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (#("e" 0 1 (fontified t face font-lock-function-name-face)) . -1064) (undo-tree-id258 . -1) (#("t" 0 1 (fontified t face font-lock-function-name-face)) . -1065) (undo-tree-id259 . -1) 1066 (t 23301 16666 516409 536000)) nil (23301 16805 34561 0) 0 nil]) ((1063 . 1066) (t 23301 16618 932585 315000)) nil (23301 16666 404746 0) 0 nil]) ((460 . 461) (t 23301 16612 704867 997000)) nil (23301 16618 927381 0) 0 nil]) ((#("RedisStore" 0 10 (fontified t)) . -466) (undo-tree-id249 . -10) (undo-tree-id250 . -3) (undo-tree-id251 . -10) (undo-tree-id252 . -10) 476) nil (23301 16612 698800 0) 0 nil]) ((461 . 466) (#("St" 0 2 (fontified t)) . -461) (undo-tree-id253 . -2) 463) nil (23301 16612 698821 0) 0 nil]) ((456 . 463)) nil (23301 16612 698826 0) 0 nil]) ((#("s" 0 1 (fontified t)) . -456) (undo-tree-id254 . -1) 457) nil (23301 16612 698833 0) 0 nil]) ((#("s" 0 1 (fontified t)) . -457) (undo-tree-id255 . -1) 458) nil (23301 16612 698840 0) 0 nil]) ((453 . 458) (t 23301 16550 613325 605000)) nil (23301 16612 698844 0) 0 nil]) ((#("&" 0 1 (fontified t)) . -1067) (undo-tree-id245 . -1) (undo-tree-id246 . -1) 1068) nil (23301 16550 608086 0) 0 nil]) ((#("t" 0 1 (fontified t face font-lock-function-name-face)) . 1059) (#("e" 0 1 (fontified t face font-lock-function-name-face)) . 1059) (#("S" 0 1 (fontified t face font-lock-function-name-face)) . 1059)) nil (23301 16550 608096 0) 0 nil]) ((#("*" 0 1 (fontified t)) . -453) (undo-tree-id247 . -1) (undo-tree-id248 . -1) 454 (t 23301 16457 576761 535000)) nil (23301 16550 608108 0) 0 nil]) ((1071 . 1072) (t 23301 16435 468648 139000)) nil (23301 16457 571839 0) 0 nil]) ((1060 . 1063)) nil (23301 16435 463411 0) 0 nil]) ((#("e" 0 1 (fontified t face font-lock-function-name-face)) . 1060)) nil (23301 16435 463420 0) 0 nil]) ((#("t" 0 1 (fontified t face font-lock-function-name-face)) . -1061) (undo-tree-id241 . -1) 1062) nil (23301 16435 463449 0) 0 nil]) ((1060 . 1062)) nil (23301 16435 463453 0) 0 nil]) ((#("S" 0 1 (fontified t face font-lock-function-name-face)) . -1060) (undo-tree-id242 . -1) (#("E" 0 1 (fontified t face font-lock-function-name-face)) . -1061) (undo-tree-id243 . -1) (#("t" 0 1 (fontified t face font-lock-function-name-face)) . -1062) (undo-tree-id244 . -1) 1063) nil (23301 16435 463473 0) 0 nil]) ((1060 . 1063) (t 23301 16182 51973 564000)) nil (23301 16435 463478 0) 0 nil]) ((458 . 459) (t 23301 16150 640830 782000)) nil (23301 16182 46488 0) 0 nil]) ((nil rear-nonsticky nil 1042 . 1043) (1013 . 1043)) nil (23301 16150 529898 0) 0 nil]) ((1011 . 1013) (t 23301 16080 595657 959000)) nil (23301 16150 529909 0) 0 nil]) ((977 . 1013) (#("	sessionStore = NewRedisStore(conn, )
" 0 1 (fontified t face whitespace-tab) 1 12 (fontified t) 12 13 (fontified t) 13 16 (fontified t) 16 29 (fontified t face font-lock-function-name-face) 29 30 (fontified t) 30 36 (fontified t) 36 37 (fontified t) 37 38 (fontified t)) . -977) (undo-tree-id224 . -13) (undo-tree-id225 . -16) (undo-tree-id226 . -16) (undo-tree-id227 . -16) (undo-tree-id228 . -16) (undo-tree-id229 . -30) (undo-tree-id230 . -36) (undo-tree-id231 . -30) (undo-tree-id232 . -30) (undo-tree-id233 . -34) (undo-tree-id234 . -35) (undo-tree-id235 . -36) (undo-tree-id236 . -36) 1013) nil (23301 16080 591143 0) 0 nil]) ((1011 . 1013)) nil (23301 16080 591152 0) 0 nil]) ((1007 . 1011) (#("co" 0 2 (fontified t)) . -1007) (undo-tree-id237 . -2) (undo-tree-id238 . 2) (undo-tree-id239 . -1) (undo-tree-id240 . -2) 1009) nil (23301 16080 591168 0) 0 nil]) ((1007 . 1009) (t 23301 16075 756893 234000)) nil (23301 16080 591171 0) 0 nil]) ((974 . 976) (#("(" 0 1 (fontified nil)) . -974) (974 . 975)) nil (23301 16075 646538 0) 0 nil]) ((967 . 974) (#("GetC" 0 4 (fontified t)) . -967) (undo-tree-id217 . -4) 971) nil (23301 16075 647432 0) 0 nil]) ((968 . 971)) nil (23301 16075 647437 0) 0 nil]) ((967 . 968)) nil (23301 16075 647443 0) 0 nil]) ((#("Get()" 0 3 (fontified t face font-lock-function-name-face) 3 4 (fontified t) 4 5 (fontified t)) . -967) (undo-tree-id218 . -5) (undo-tree-id219 . -5) (undo-tree-id220 . 1) (undo-tree-id221 . -5) (undo-tree-id222 . 2) (undo-tree-id223 . -4) 972 (t 23301 16063 863835 525000)) nil (23301 16075 647475 0) 0 nil]) ((27 . 67) 921) nil (23301 16063 859210 0) 0 nil]) ((#("n" 0 1 (fontified t face font-lock-function-name-face)) . 930) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1)) nil (23301 16063 859252 0) 0 nil]) ((#("C" 0 1 (fontified t face font-lock-function-name-face)) . -930) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#("o" 0 1 (fontified t face font-lock-function-name-face)) . -931) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (#("n" 0 1 (fontified t face font-lock-function-name-face)) . -932) (undo-tree-id191 . -1) (undo-tree-id192 . -1) 933) nil (23301 16063 859291 0) 0 nil]) ((934 . 936) (#("(" 0 1 (fontified nil)) . -934) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (934 . 935)) nil (23301 16063 859301 0) 0 nil]) ((#("*" 0 1 (fontified t)) . -934) (undo-tree-id195 . -1) (undo-tree-id196 . -1) 935) nil (23301 16063 859307 0) 0 nil]) ((934 . 935)) nil (23301 16063 859309 0) 0 nil]) ((927 . 934) (#("GetCo" 0 5 (fontified t)) . -927) (undo-tree-id197 . -5) 932) nil (23301 16063 859314 0) 0 nil]) ((929 . 932)) nil (23301 16063 859316 0) 0 nil]) ((#("r" 0 1 (fontified t)) . -929) (undo-tree-id198 . -1) 930) nil (23301 16063 859321 0) 0 nil]) ((927 . 930)) nil (23301 16063 859324 0) 0 nil]) ((#("g" 0 1 (fontified t)) . -927) (undo-tree-id199 . -1) (#("e" 0 1 (fontified t)) . -928) (undo-tree-id200 . -1) (#("t" 0 1 (fontified t)) . -929) (undo-tree-id201 . -1) (#("C" 0 1 (fontified t)) . -930) (undo-tree-id202 . -1) 931) nil (23301 16063 859358 0) 0 nil]) ((927 . 931)) nil (23301 16063 859362 0) 0 nil]) ((#("C" 0 1 (fontified t)) . -927) (undo-tree-id203 . -1) 928) nil (23301 16063 859367 0) 0 nil]) ((913 . 928)) nil (23301 16063 859368 0) 0 nil]) ((#("lust" 0 4 (fontified t)) . 913) (undo-tree-id204 . -4) (undo-tree-id205 . -4) (undo-tree-id206 . -4) (undo-tree-id207 . -4)) nil (23301 16063 859376 0) 0 nil]) ((913 . 917)) nil (23301 16063 859378 0) 0 nil]) ((#("c" 0 1 (fontified t)) . -913) (undo-tree-id208 . -1) (#("o" 0 1 (fontified t)) . -914) (undo-tree-id209 . -1) 915) nil (23301 16063 859386 0) 0 nil]) ((913 . 915)) nil (23301 16063 859395 0) 0 nil]) ((#("redis" 0 5 (fontified t)) . 913) (undo-tree-id210 . -5) (undo-tree-id211 . -5)) nil (23301 16063 859403 0) 0 nil]) ((#("c" 0 1 (fontified t)) . -918) (undo-tree-id212 . -1) (#("k" 0 1 (fontified t)) . -919) (undo-tree-id213 . -1) 920) nil (23301 16063 859412 0) 0 nil]) ((918 . 920)) nil (23301 16063 859416 0) 0 nil]) ((#("c" 0 1 (fontified t)) . -918) (undo-tree-id214 . -1) (#("l" 0 1 (fontified t)) . -919) (undo-tree-id215 . -1) 920) nil (23301 16063 859424 0) 0 nil]) ((918 . 920)) nil (23301 16063 859426 0) 0 nil]) ((#(" " 0 1 (fontified t)) . -918) (undo-tree-id216 . -1) 919) nil (23301 16063 859431 0) 0 nil]) ((913 . 919)) nil (23301 16063 859432 0) 0 nil]) ((911 . 913) (t 23301 16025 813183 190000)) nil (23301 16063 859433 0) 0 nil]) ((#("sessions." 0 9 (fontified t)) . 414) (undo-tree-id173 . -9) (undo-tree-id174 . -9) (undo-tree-id175 . -9) (t 23301 16014 811187 767000)) nil (23301 16025 809267 0) 0 nil]) ((#("	\"bitbucket.org/kyc-agent/common/middlewares/session\"
" 0 1 (fontified t face whitespace-tab) 1 53 (fontified t face font-lock-string-face) 53 54 (fontified t)) . -27) (undo-tree-id167 . -53) 991) nil (23301 16014 807615 0) 0 nil]) ((#("session." 0 8 (fontified t)) . 991) (undo-tree-id168 . -8) (undo-tree-id169 . -7) (undo-tree-id170 . -8) (undo-tree-id171 . -8) (undo-tree-id172 . -8) (t 23301 15992 178287 12000)) nil (23301 16014 807636 0) 0 nil]) ((27 . 81) 26) nil (23301 15992 174363 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -26) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) 27) nil (23301 15992 174407 0) 0 nil]) ((#("	\"bitbucket.org/kyc-agent/common/middlewares/session\"" 0 1 (fontified t face whitespace-tab) 1 53 (fontified t face font-lock-string-face)) . 27) (undo-tree-id163 . -53) (undo-tree-id164 . -53) (undo-tree-id165 . -53) (undo-tree-id166 . -53) (t 23301 15959 732054 875000)) nil (23301 15992 174420 0) 0 nil]) ((#("	\"bitbucket.org/kyc-agent/common/redis\"
" 0 1 (fontified t face whitespace-tab) 1 39 (fontified t face font-lock-string-face) 39 40 (fontified t)) . -81) (undo-tree-id124 . -40) 1054) nil (23301 15959 727622 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -1054) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) 1055) nil (23301 15959 727645 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -1014) (undo-tree-id131 . -1) (undo-tree-id132 . -1) 1015) nil (23301 15959 727654 0) 0 nil]) ((#("	var storeErr error" 0 1 (fontified t face whitespace-tab) 1 4 (fontified t face font-lock-keyword-face) 4 19 (fontified t)) . 1015) (undo-tree-id133 . -19) (undo-tree-id134 . -19)) nil (23301 15959 727661 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -1034) (undo-tree-id135 . -1) 1035) nil (23301 15959 727668 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -1014) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) 1015) nil (23301 15959 727698 0) 0 nil]) ((#("	pool := redis.GetRedisPool()" 0 1 (fontified t face whitespace-tab) 1 5 (fontified t) 5 12 (fontified t) 12 15 (fontified t) 15 27 (fontified t face font-lock-function-name-face) 27 29 (fontified t)) . 1015) (undo-tree-id146 . -29) (undo-tree-id147 . -29) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -5) (undo-tree-id152 . -5) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -29) (t 23301 15888 437293 216000)) nil (23301 15959 727755 0) 0 nil] [nil nil ((#("createSessionStore() {
	" 0 18 (fontified t face font-lock-function-name-face) 18 23 (fontified t) 23 24 (fontified t face whitespace-tab)) . -992) (undo-tree-id118 . -23) (undo-tree-id119 . -24) (undo-tree-id120 . -24) (undo-tree-id121 . -23) (undo-tree-id122 . -23) (undo-tree-id123 . -24) 1016 (t 23301 15888 437293 216000)) ((992 . 1016)) (23301 15942 317737 0) 0 nil]) ((1106 . 1107) (#("	
" 0 1 (fontified t face whitespace-tab) 1 2 (fontified t)) . -1106) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) 1107) nil (23301 15942 318206 0) 0 nil]) ((1106 . 1107) (t 23301 15864 752154 235000)) nil (23301 15888 433463 0) 0 nil]) ((#("	if storeErr != nil {
		panic(\"Error Creating Session Store err: \" + storeErr.Error())
	}" 0 1 (fontified t face whitespace-tab) 1 3 (fontified t face font-lock-keyword-face) 3 16 (fontified t) 16 19 (fontified t face font-lock-constant-face) 19 22 (fontified t) 22 24 (fontified t face whitespace-tab) 24 29 (fontified t face font-lock-builtin-face) 29 30 (fontified t) 30 47 (fontified t face font-lock-string-face) 47 66 (fontified t face font-lock-string-face) 66 78 (fontified t) 78 83 (fontified t face font-lock-function-name-face) 83 87 (fontified t) 87 88 (fontified t face whitespace-tab) 88 89 (fontified t)) . -1106) (undo-tree-id109 . -89) (undo-tree-id110 . -89) (undo-tree-id111 . 1) (undo-tree-id112 . -89) (undo-tree-id113 . 69) (undo-tree-id114 . -21) 1195 (t 23301 15861 677767 303000)) nil (23301 15864 747823 0) 0 nil]) ((#(":" 0 1 (fontified t)) . -1080) (undo-tree-id96 . -1) 1081) nil (23301 15861 673909 0) 0 nil]) ((1066 . 1067) (#("		" 0 1 (fontified t face whitespace-tab) 1 2 (fontified t face whitespace-tab)) . -1066) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) 1067) nil (23301 15861 673934 0) 0 nil]) ((#("
" 0 1 (fontified t)) . 1067)) nil (23301 15861 673939 0) 0 nil]) ((1068 . 1069) 1072) nil (23301 15861 673943 0) 0 nil]) ((1067 . 1068)) nil (23301 15861 673946 0) 0 nil]) ((#("	" 0 1 (fontified nil)) . 1065) (1065 . 1066) (1065 . 1066)) nil (23301 15861 673950 0) 0 nil]) ((507 . 508)) nil (23301 15861 673953 0) 0 nil]) ((#("(" 0 1 (fontified nil)) . -507) (undo-tree-id103 . -1) (#(")" 0 1 (fontified t)) . 508)) nil (23301 15861 673962 0) 0 nil]) ((507 . 509) (#("(" 0 1 (fontified nil)) . -507) (507 . 508)) nil (23301 15861 673967 0) 0 nil]) ((#("&" 0 1 (fontified t)) . -507) (undo-tree-id104 . -1) 508) nil (23301 15861 673972 0) 0 nil]) ((507 . 508)) nil (23301 15861 673977 0) 0 nil]) ((516 . 525) (#("Red" 0 3 (fontified t)) . -516) (undo-tree-id105 . -3) 519) nil (23301 15861 673984 0) 0 nil]) ((516 . 519)) nil (23301 15861 673988 0) 0 nil]) ((#("Store" 0 5 (fontified t)) . -516) (undo-tree-id106 . -5) (undo-tree-id107 . -1) (undo-tree-id108 . -5) 521 (t 23301 15812 866925 846000)) nil (23301 15861 673997 0) 0 nil]) ((121 . 152) 120) nil (23301 15812 863304 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -120) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) 121) nil (23301 15812 863361 0) 0 nil]) ((#("	\"github.com/gin-contrib/sessions\"" 0 1 (fontified t face whitespace-tab) 1 34 (fontified t face font-lock-string-face)) . 121) (undo-tree-id90 . -34) (undo-tree-id91 . -34) (undo-tree-id92 . -34) (undo-tree-id93 . -34) (undo-tree-id94 . -34) (undo-tree-id95 . -34) (t 23301 15805 747937 96000)) nil (23301 15812 863386 0) 0 nil]) ((#("	goginredis \"github.com/gin-contrib/sessions/redis\"
" 0 1 (fontified t face whitespace-tab) 1 12 (fontified t) 12 51 (fontified t face font-lock-string-face) 51 52 (fontified t)) . -156) (27 . 81) 1102) nil (23301 15805 744757 0) 0 nil]) ((1100 . 1102) (#("(" 0 1 (fontified nil)) . -1100) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (1100 . 1101)) nil (23301 15805 744790 0) 0 nil]) ((1087 . 1100) (#("NewRedi" 0 7 (fontified t)) . -1087) (undo-tree-id37 . -7) (undo-tree-id38 . -6) (undo-tree-id39 . -7) 1094) nil (23301 15805 744801 0) 0 nil]) ((1075 . 1094)) nil (23301 15805 744803 0) 0 nil]) ((#(", storeErr = " 0 12 (fontified t) 12 13 (fontified t)) . -1075) (undo-tree-id40 . -13) (undo-tree-id41 . -13) (undo-tree-id42 . -13) (undo-tree-id43 . -13) (undo-tree-id44 . -13) (undo-tree-id45 . -13) (undo-tree-id46 . -13) (undo-tree-id47 . -13) (undo-tree-id48 . -13) (undo-tree-id49 . -13) (undo-tree-id50 . -13) (undo-tree-id51 . -13) (undo-tree-id52 . -13) (undo-tree-id53 . -13) (undo-tree-id54 . -12) 1088) nil (23301 15805 744827 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -1088) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) 1089) nil (23301 15805 744843 0) 0 nil]) ((#("	sessionStore, storeErr = goginredis.NewRedisStore()" 0 1 (fontified t face whitespace-tab) 1 25 (fontified t) 25 26 (fontified t) 26 37 (fontified t) 37 50 (fontified t face font-lock-function-name-face) 50 51 (fontified t) 51 52 (fontified t)) . 1089) (undo-tree-id64 . -52) (undo-tree-id65 . -37) (undo-tree-id66 . -37) (undo-tree-id67 . -37) (undo-tree-id68 . -26) (undo-tree-id69 . -36) (undo-tree-id70 . -37) (undo-tree-id71 . -52)) nil (23301 15805 744860 0) 0 nil]) ((#("NewStoreWithPool(pool, []byte(cookieConfig.CookieKey))" 0 16 (fontified t face font-lock-function-name-face) 16 25 (fontified t) 25 29 (fontified t face font-lock-function-name-face) 29 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 50 (fontified t) 50 51 (fontified t) 51 54 (fontified t face (-1))) . -1088) (undo-tree-id72 . -54) (undo-tree-id73 . -54) (undo-tree-id74 . 1) (undo-tree-id75 . -54) (undo-tree-id76 . 38) (undo-tree-id77 . -17) 1142) nil (23301 15805 744879 0) 0 nil]) ((#("." 0 1 (fontified t)) . 1088) (undo-tree-id78 . -1) (undo-tree-id79 . -1)) nil (23301 15805 744884 0) 0 nil]) ((#("goginredis" 0 10 (fontified t)) . -1088) (undo-tree-id80 . -10) (undo-tree-id81 . -10) 1098 (t 23301 15774 271913 870000)) nil (23301 15805 744889 0) 0 nil]) ((#("/" 0 1 (fontified t)) . 1155) (#("/" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 1155) (t 23301 5005 119929 645000)) nil (23301 15774 268383 0) 0 nil]) ((1155 . 1157) (t 23301 5002 610263 578000)) nil (23301 5005 116847 0) 0 nil]) ((#("/" 0 1 (fontified t)) . 1063) (#("/" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 1063)) nil (23301 5002 606898 0) 0 nil]) ((1063 . 1065) (t 23301 4985 367908 377000)) nil (23301 5002 606912 0) 0 nil]) ((1204 . 1206) (#("(" 0 1 (fontified nil)) . -1204) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (1204 . 1205)) nil (23301 4985 364717 0) 0 nil]) ((1191 . 1204)) nil (23301 4985 364726 0) 0 nil]) ((#("NewRedisStore()" 0 13 (fontified t face font-lock-function-name-face) 13 14 (fontified t) 14 15 (fontified t)) . 1191) (undo-tree-id33 . -15) (undo-tree-id34 . -15) (t 23301 4970 287614 744000)) nil (23301 4985 364743 0) 0 nil]) ((1204 . 1206) (#("(" 0 1 (fontified nil)) . -1204) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (1201 . 1205)) nil (23301 4970 284299 0) 0 nil]) ((#("g" 0 1 (fontified t)) . -1201) (undo-tree-id5 . -1) (#("o" 0 1 (fontified t)) . -1202) (undo-tree-id6 . -1) (#("r" 0 1 (fontified t)) . -1203) (undo-tree-id7 . -1) (#("e" 0 1 (fontified t)) . -1204) (undo-tree-id8 . -1) 1205) nil (23301 4970 284324 0) 0 nil]) ((1194 . 1205)) nil (23301 4970 284329 0) 0 nil]) ((#("R" 0 1 (fontified t)) . -1194) (undo-tree-id9 . -1) 1195) nil (23301 4970 284346 0) 0 nil]) ((1193 . 1195)) nil (23301 4970 284350 0) 0 nil]) ((#("w" 0 1 (fontified t)) . -1193) (undo-tree-id10 . -1) (#("S" 0 1 (fontified t)) . -1194) (undo-tree-id11 . -1) (#("t" 0 1 (fontified t)) . -1195) (undo-tree-id12 . -1) (#("o" 0 1 (fontified t)) . -1196) (undo-tree-id13 . -1) (#("r" 0 1 (fontified t)) . -1197) (undo-tree-id14 . -1) (#("e" 0 1 (fontified t)) . -1198) (undo-tree-id15 . -1) 1199) nil (23301 4970 284376 0) 0 nil]) ((1190 . 1199)) nil (23301 4970 284381 0) 0 nil]) ((1180 . 1190) (#("gogin" 0 5 (fontified t)) . -1180) (undo-tree-id16 . -5) 1185) nil (23301 4970 284387 0) 0 nil]) ((1180 . 1185)) nil (23301 4970 284388 0) 0 nil]) ((#("f" 0 1 (fontified t)) . -1180) (undo-tree-id17 . -1) 1181) nil (23301 4970 284393 0) 0 nil]) ((1180 . 1181)) nil (23301 4970 284395 0) 0 nil]) ((1178 . 1180)) nil (23301 4970 284407 0) 0 nil]) ((#("+" 0 1 (fontified t)) . -1178) (undo-tree-id18 . -1) (#(" " 0 1 (fontified t)) . -1179) (undo-tree-id19 . -1) 1180) nil (23301 4970 284415 0) 0 nil]) ((1171 . 1180)) nil (23301 4970 284417 0) 0 nil]) ((#("p" 0 1 (fontified t)) . -1171) (undo-tree-id20 . -1) (#("r" 0 1 (fontified t)) . -1172) (undo-tree-id21 . -1) (#("e" 0 1 (fontified t)) . -1173) (undo-tree-id22 . -1) 1174) nil (23301 4970 284428 0) 0 nil]) ((1171 . 1174)) nil (23301 4970 284430 0) 0 nil]) ((#("r" 0 1 (fontified t)) . -1171) (undo-tree-id23 . -1) (#("e" 0 1 (fontified t)) . -1172) (undo-tree-id24 . -1) 1173) nil (23301 4970 284438 0) 0 nil]) ((1169 . 1173)) nil (23301 4970 284440 0) 0 nil]) ((#("S" 0 1 (fontified t)) . -1169) (undo-tree-id25 . -1) (#("T" 0 1 (fontified t)) . -1170) (undo-tree-id26 . -1) 1171) nil (23301 4970 284460 0) 0 nil]) ((1155 . 1171)) nil (23301 4970 284462 0) 0 nil]) ((1154 . 1155)) nil (23301 4970 284463 0) 0 nil]) ((#("	eses" 0 1 (fontified t face whitespace-tab) 1 5 (fontified t)) . 1154) (undo-tree-id27 . -5) (undo-tree-id28 . -5) (undo-tree-id29 . -5)) nil (23301 4970 284469 0) 0 nil]) ((1156 . 1159)) nil (23301 4970 284471 0) 0 nil]) ((#("s" 0 1 (fontified t)) . -1156) (undo-tree-id30 . -1) 1157) nil (23301 4970 284477 0) 0 nil]) ((1156 . 1157)) nil (23301 4970 284478 0) 0 nil]) ((1155 . 1156)) nil (23301 4970 284479 0) 0 nil]) ((1154 . 1155) (t 23301 4405 536192 808000)) nil (23301 4970 284480 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -1444) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) 1445 (t 23291 55541 154190 509000)) nil (23301 4405 532945 0) 0 nil]) nil nil (23301 4405 532950 0) 0 nil] #9# 17375 173 nil]