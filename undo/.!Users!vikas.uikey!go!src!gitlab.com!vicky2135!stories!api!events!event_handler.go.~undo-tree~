"908e23f2067dd6b017e8117d51dca0966e0070fc"
[cl-struct-undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#1=[nil nil ((610 . 653) (#("		req := dto.(*eventDTO.CreateEventRequest)
" 0 1 (fontified t face whitespace-tab) 1 2 (fontified t face whitespace-tab) 2 15 (fontified t) 15 23 (fontified t face font-lock-type-face) 23 24 (fontified t face font-lock-type-face) 24 41 (fontified t face font-lock-type-face) 41 42 (rear-nonsticky t fontified t face font-lock-type-face) 42 43 (fontified t) 43 44 (fontified t)) . -610) (undo-tree-id51 . -1) 506) nil (23297 41761 163225 0) 0 nil]) ((492 . 493) (#("		" 0 1 (fontified t face whitespace-tab) 1 2 (fontified t face whitespace-tab)) . -492) (undo-tree-id52 . -1) (undo-tree-id53 . -1) 507) nil (23297 41761 163241 0) 0 nil]) ((nil rear-nonsticky nil 506 . 507) (493 . 507)) nil (23297 41761 163248 0) 0 nil]) ((492 . 493)) nil (23297 41761 163255 0) 0 nil]) ((#("	return 0, nil" 0 1 (fontified t face whitespace-tab) 1 7 (fontified t face font-lock-keyword-face) 7 11 (fontified t) 11 14 (fontified t face font-lock-constant-face)) . 595) (undo-tree-id54 . -14) (undo-tree-id55 . -14) (undo-tree-id56 . -14) (undo-tree-id57 . -14) (undo-tree-id58 . -14) (undo-tree-id59 . -14)) nil (23297 41761 163276 0) 0 nil] [nil nil ((#("func CreateEvent(w http.ResponseWri" 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 16 (fontified t face font-lock-function-name-face) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 24 (fontified t face font-lock-type-face) 24 35 (fontified t face font-lock-type-face)) . 496) (undo-tree-id35 . -35) (undo-tree-id36 . -35) (undo-tree-id37 . -35) (undo-tree-id38 . -35)) ((496 . 531)) (23297 41559 381691 0) 0 nil]) ((611 . 937)) nil (23297 41559 381912 0) 0 nil]) ((609 . 611)) nil (23297 41559 381706 0) 0 nil]) ((#("	req := dto.(*eventDTO.CreateEventRequest)

	ctx := context.Background()
	resp, err := events.CreateNewEvent(ctx, req)

	log.Print(req)
	log.Println(resp, err)

	if err != nil {
		errBytes, _ := json.Marshal(err)
		return http.StatusBadRequest, errBytes
	}

	respBytes, _ := json.Marshal(resp)
	return http.StatusOK, respBytes" 0 1 (fontified t face whitespace-tab) 1 14 (fontified t) 14 22 (fontified t face font-lock-type-face) 22 23 (fontified t face font-lock-type-face) 23 40 (fontified t face font-lock-type-face) 40 41 (rear-nonsticky t fontified t face font-lock-type-face) 41 42 (fontified t) 42 43 (fontified t) 43 44 (fontified t) 44 45 (fontified t face whitespace-tab) 45 52 (fontified t) 52 60 (fontified t) 60 70 (fontified t face font-lock-function-name-face) 70 73 (fontified t) 73 74 (fontified t face whitespace-tab) 74 94 (fontified t) 94 107 (fontified t face font-lock-function-name-face) 107 108 (rear-nonsticky t fontified t face font-lock-function-name-face) 108 109 (fontified t) 109 112 (fontified t) 112 113 (fontified t) 113 119 (fontified t) 119 120 (fontified t) 120 121 (fontified t face whitespace-tab) 121 125 (fontified t) 125 130 (fontified t face font-lock-function-name-face) 130 136 (fontified t) 136 137 (fontified t face whitespace-tab) 137 141 (fontified t) 141 148 (fontified t face font-lock-function-name-face) 148 161 (fontified t) 161 162 (fontified t face whitespace-tab) 162 164 (fontified t face font-lock-keyword-face) 164 172 (fontified t) 172 175 (fontified t face font-lock-constant-face) 175 178 (fontified t) 178 180 (fontified t face whitespace-tab) 180 190 (fontified t) 190 200 (fontified t) 200 207 (fontified t face font-lock-function-name-face) 207 213 (fontified t) 213 215 (fontified t face whitespace-tab) 215 221 (fontified t face font-lock-keyword-face) 221 254 (fontified t) 254 255 (fontified t face whitespace-tab) 255 258 (fontified t) 258 259 (fontified t face whitespace-tab) 259 266 (fontified t) 266 280 (fontified t) 280 287 (fontified t face font-lock-function-name-face) 287 294 (fontified t) 294 295 (fontified t face whitespace-tab) 295 301 (fontified t face font-lock-keyword-face) 301 308 (fontified t) 308 326 (fontified t)) . 492) (undo-tree-id39 . -22) (undo-tree-id40 . -8) (undo-tree-id41 . -8) (undo-tree-id42 . -23) (undo-tree-id43 . -23) (undo-tree-id44 . -23) (undo-tree-id45 . -14) (undo-tree-id46 . -41) (undo-tree-id47 . -41) (undo-tree-id48 . -326) (undo-tree-id49 . -14) (undo-tree-id50 . -326) 818 (t 23297 10273 720296 164000)) nil (23297 41559 381743 0) 0 nil] [nil nil ((514 . 515) (t 23297 10273 720296 164000)) ((#("f" 0 1 (fontified t face font-lock-type-face)) . 514) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1)) (23297 10362 212566 0) 0 nil] [nil nil ((514 . 517) (t 23297 10273 720296 164000)) ((#("fjs" 0 3 (fontified t face font-lock-type-face)) . 514) (undo-tree-id25 . -3) (undo-tree-id26 . -1) (undo-tree-id27 . -2) (undo-tree-id28 . -3)) (23297 10359 183269 0) 0 nil]) ((168 . 213) 469) nil (23297 10362 212877 0) 0 nil]) ((461 . 469) (#("eventD" 0 6 (fontified t face font-lock-type-face)) . -461) (undo-tree-id15 . -6) (undo-tree-id16 . -1) (undo-tree-id17 . -2) (undo-tree-id18 . -3) (undo-tree-id19 . -4) (undo-tree-id20 . -5) (undo-tree-id21 . -6) (undo-tree-id22 . -6) 467) nil (23297 10273 717230 0) 0 nil]) ((461 . 467)) nil (23297 10273 717235 0) 0 nil]) ((#("dto" 0 3 (fontified t face font-lock-type-face)) . 461) (undo-tree-id23 . -3) (undo-tree-id24 . -3) (t 23297 10266 369042 927000)) nil (23297 10273 717244 0) 0 nil]) ((nil rear-nonsticky nil 482 . 483) (465 . 483)) nil (23297 10266 365197 0) 0 nil]) ((#("CreateEventRequest" 0 18 (fontified t face font-lock-type-face)) . 465) (undo-tree-id13 . -18) (undo-tree-id14 . -18) (t 23297 10237 185435 504000)) nil (23297 10266 365229 0) 0 nil]) ((455 . 458)) nil (23297 10237 181334 0) 0 nil]) ((#("requestDTO" 0 10 (fontified t)) . 455) (undo-tree-id11 . -10) (undo-tree-id12 . -10) (t 23297 10178 602038 523000)) nil (23297 10237 181368 0) 0 nil]) ((1 . 1129)) nil (23297 10178 598348 0) 0 nil]) ((#("package events

import (
	\"net/http\"

	\"gitlab.com/vicky2135/stories/commons/funnel\"
	\"gitlab.com/vicky2135/stories/commons/logger\"
)

var (
	eventLogger *logger.Logger
)

const (
	logTag = \"eventHandler\"
)

func Initialize() {
	eventLogger = logger.New(logTag)
}

func GetAllEvents(w http.ResponseWriter, r *http.Request, dto funnel.ApiRequestDTO) (int, []byte) {
	return 0, nil
}

func CreateEvent(w http.ResponseWriter, r *http.Request, dto funnel.ApiRequestDTO) (int, []byte) {
	return 0, nil
}

func DeleteEvent(w http.ResponseWriter, r *http.Request, dto funnel.ApiRequestDTO) (int, []byte) {
	return 0, nil
}

func UpdateEvent(w http.ResponseWriter, r *http.Request, dto funnel.ApiRequestDTO) (int, []byte) {
	return 0, nil
}
" 0 7 (fontified t face font-lock-keyword-face) 7 16 (fontified t) 16 22 (fontified t face font-lock-keyword-face) 22 25 (fontified t) 25 26 (fontified t face whitespace-tab) 26 36 (fontified t face font-lock-string-face) 36 38 (fontified t) 38 39 (fontified t face whitespace-tab) 39 84 (fontified t face font-lock-string-face) 84 85 (fontified t) 85 86 (fontified t face whitespace-tab) 86 131 (fontified t face font-lock-string-face) 131 135 (fontified t) 135 138 (fontified t face font-lock-keyword-face) 138 141 (fontified t) 141 142 (fontified t face whitespace-tab) 142 172 (fontified t) 172 177 (fontified t face font-lock-keyword-face) 177 180 (fontified t) 180 181 (fontified t face whitespace-tab) 181 190 (fontified t) 190 204 (fontified t face font-lock-string-face) 204 208 (fontified t) 208 212 (fontified t face font-lock-keyword-face) 212 213 (fontified t) 213 223 (fontified t face font-lock-function-name-face) 223 228 (fontified t) 228 229 (fontified t face whitespace-tab) 229 250 (fontified t) 250 253 (fontified t face font-lock-function-name-face) 253 265 (fontified t) 265 269 (fontified t face font-lock-keyword-face) 269 270 (fontified t) 270 282 (fontified t face font-lock-function-name-face) 282 285 (fontified t) 285 304 (fontified t face font-lock-type-face) 304 309 (fontified t) 309 321 (fontified t face font-lock-type-face) 321 327 (fontified t) 327 345 (fontified t face font-lock-type-face) 345 347 (fontified t face (-1 font-lock-type-face)) 347 350 (fontified t face (-1)) 350 353 (fontified t face (-1 font-lock-type-face)) 353 357 (fontified t face (-1)) 357 361 (fontified t face (-1 font-lock-type-face)) 361 364 (fontified t face (-1)) 364 365 (fontified t) 365 366 (fontified t face whitespace-tab) 366 372 (fontified t face font-lock-keyword-face) 372 376 (fontified t) 376 379 (fontified t face font-lock-constant-face) 379 383 (fontified t) 383 387 (fontified t face font-lock-keyword-face) 387 388 (fontified t) 388 399 (fontified t face font-lock-function-name-face) 399 402 (fontified t) 402 421 (fontified t face font-lock-type-face) 421 426 (fontified t) 426 438 (fontified t face font-lock-type-face) 438 444 (fontified t) 444 463 (fontified t face font-lock-type-face) 463 464 (fontified t face (-1 font-lock-type-face)) 464 467 (fontified t face (-1)) 467 470 (fontified t face (-1 font-lock-type-face)) 470 474 (fontified t face (-1)) 474 478 (fontified t face (-1 font-lock-type-face)) 478 481 (fontified t face (-1)) 481 482 (fontified t) 482 483 (fontified t face whitespace-tab) 483 489 (fontified t face font-lock-keyword-face) 489 493 (fontified t) 493 496 (fontified t face font-lock-constant-face) 496 500 (fontified t) 500 504 (fontified t face font-lock-keyword-face) 504 505 (fontified t) 505 516 (fontified t face font-lock-function-name-face) 516 519 (fontified t) 519 538 (fontified t face font-lock-type-face) 538 543 (fontified t) 543 555 (fontified t face font-lock-type-face) 555 561 (fontified t) 561 580 (fontified t face font-lock-type-face) 580 581 (fontified t face (-1 font-lock-type-face)) 581 584 (fontified t face (-1)) 584 587 (fontified t face (-1 font-lock-type-face)) 587 591 (fontified t face (-1)) 591 595 (fontified t face (-1 font-lock-type-face)) 595 598 (fontified t face (-1)) 598 599 (fontified t) 599 600 (fontified t face whitespace-tab) 600 606 (fontified t face font-lock-keyword-face) 606 610 (fontified t) 610 613 (fontified t face font-lock-constant-face) 613 617 (fontified t) 617 621 (fontified t face font-lock-keyword-face) 621 622 (fontified t) 622 633 (fontified t face font-lock-function-name-face) 633 636 (fontified t) 636 655 (fontified t face font-lock-type-face) 655 660 (fontified t) 660 672 (fontified t face font-lock-type-face) 672 678 (fontified t) 678 697 (fontified t face font-lock-type-face) 697 698 (fontified t face (-1 font-lock-type-face)) 698 701 (fontified t face (-1)) 701 704 (fontified t face (-1 font-lock-type-face)) 704 708 (fontified t face (-1)) 708 712 (fontified t face (-1 font-lock-type-face)) 712 715 (fontified t face (-1)) 715 716 (fontified t) 716 717 (fontified t face whitespace-tab) 717 723 (fontified t face font-lock-keyword-face) 723 727 (fontified t) 727 730 (fontified t face font-lock-constant-face) 730 733 (fontified t)) . 1) (undo-tree-id0 . -733) (undo-tree-id1 . -733) (undo-tree-id2 . -270) (undo-tree-id3 . -282) (undo-tree-id4 . -270) (undo-tree-id5 . -733) (undo-tree-id6 . -733) (undo-tree-id7 . -282) (undo-tree-id8 . -733) (undo-tree-id9 . -733) (undo-tree-id10 . -733) (t 23296 3808 378077 451000)) nil (23297 10178 598379 0) 0 nil]) nil nil (23297 10178 598384 0) 0 nil] #1# 2003 21 nil]