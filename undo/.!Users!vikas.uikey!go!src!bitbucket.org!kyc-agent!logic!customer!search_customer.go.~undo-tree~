"0c05840d845d14567d93f27b16aec94b7f162910"
[cl-struct-undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#1=[nil ([nil nil ((#("	customer." 0 1 (fontified t face whitespace-tab) 1 10 (fontified t)) . 1678) (undo-tree-id44 . -10) (undo-tree-id45 . -1) (undo-tree-id46 . -9) (undo-tree-id47 . -10) (undo-tree-id48 . -10) (undo-tree-id49 . -10) (undo-tree-id50 . -10) (undo-tree-id51 . -10) (undo-tree-id52 . -10) (undo-tree-id53 . -10) (undo-tree-id54 . -10) (undo-tree-id55 . -10) (undo-tree-id56 . -10)) ((1678 . 1688)) (23303 45912 738394 0) 0 nil] [nil ([nil nil ((1268 . 1273)) ((#("OvoId" 0 5 (fontified t)) . 1268) (t 23303 45777 913677 746000)) (23303 45777 905107 0) 0 nil]) ((#("OvoID" 0 5 (fontified t)) . 1268) (undo-tree-id40 . -5) (undo-tree-id41 . -5) (undo-tree-id42 . -5) (undo-tree-id43 . -5) (t 23301 17874 669305 62000)) ((1268 . 1273)) (23303 45781 182337 0) 0 nil] [nil ([nil nil ((#("e" 0 1 (fontified t face font-lock-function-name-face)) . -783) (undo-tree-id37 . -1) 784) ((783 . 784)) (23303 45753 834813 0) 0 nil] [nil nil ((#("e" 0 1 (fontified t face font-lock-function-name-face)) . -783) (undo-tree-id19 . -1) (undo-tree-id20 . 1) (undo-tree-id21 . -1) 784) ((783 . 784)) (23303 41990 460446 0) 0 nil]) ((783 . 784) (t 23301 17874 669305 62000)) ((#("e" 0 1 (fontified t face font-lock-function-name-face)) . 783) (undo-tree-id38 . -1) (undo-tree-id39 . -1)) (23303 45753 834931 0) 0 nil]) ((30 . 2252) ("bitbucket.org/kyc-agent/common/logger\"
	\"bitbucket.org/kyc-agent/config\"
	\"bitbucket.org/kyc-agent/dto\"
	\"bitbucket.org/kyc-agent/exceptions\"
	\"bitbucket.org/kyc-agent/external/astina\"
	\"bitbucket.org/kyc-agent/logic/customer/utils\"
	\"bitbucket.org/kyc-agent/logic/otp\"
	\"fmt\"
	\"github.com/gin-gonic/gin\"
)

func SearchCustomer(c *gin.Context, search *dto.CustomerSearch) (*astina.Customer, *exceptions.ErrorResponse) {

	requestId := c.MustGet(\"RequestId\").(string)

	logger.Info(searchCustomerLogTag, fmt.Sprint(\"request received to search customer: %s\", requestId))

	searchCustomerError := &exceptions.ErrorResponse{}

	searchCustomer := &astina.SearchCustomerByPhoneRequest{
		Phone:  search.Phone,
		Method: method,
	}

	customer, err := astina.SearchCustomerByPhone(searchCustomer, requestId)

	if nil != err {
		return nil, exceptions.TransformSDKErrorToKYCError(err)
	}

	if customer == nil {
		logger.Info(searchCustomerLogTag, \"No customer found for given phone number\")
		searchCustomerError.Build(exceptions.NoCustomerFoundErrorCode)
		return nil, searchCustomerError
	}

	logger.Info(searchCustomerLogTag, \"received customer details\", customer)

	// do not send data for blocked customer
	otpKey := otpRedisKey + customer.OvoID
	isValidCustomerSession, customerSessionErr := otp.IsValidSession(requestId, config.Config.OtpConfig, otpKey)
	if isValidCustomerSession == otp.InvalidSession {
		return nil, customerSessionErr
	}

	accountVerificationErr := utils.VerifyAccountStatus(customer.SavingAccount)

	if accountVerificationErr != nil {
		return nil, accountVerificationErr
	}

	// get KTP, NPWP, Sign, Selfie images from falcon
	customer.KTPImageBase64, _ = getImage(requestId, customer.OvoID, KTPDocumentType)
	customer.NPWPImageBase64, _ = getImage(requestId, customer.OvoID, NPWPDocumentType)
	customer.SignatureImageBase64, _ = getImage(requestId, customer.OvoID, SignatureDocumentType)
	customer.SelfieImageBase64, _ = getImage(requestId, customer.OvoID, SelfieDocumentType)

	customerCache := new(utils.AstinaCache).
		SetOvoId(customer.OvoID).
		SetMobile(customer.MobilePhoneNumber).
		SetEmailIds(customer.Emails).
		SetSavingsAccount(customer.SavingAccount" . 30) (t 23301 17539 708966 756000)) nil (23303 45912 738570 0) 0 nil]) ((30 . 2214) ("fmt\"

	\"bitbucket.org/kyc-agent/common/logger\"
	\"bitbucket.org/kyc-agent/config\"
	\"bitbucket.org/kyc-agent/dto\"
	\"bitbucket.org/kyc-agent/exceptions\"
	\"bitbucket.org/kyc-agent/external/astina\"
	\"bitbucket.org/kyc-agent/logic/customer/utils\"
	\"bitbucket.org/kyc-agent/logic/otp\"
	\"github.com/gin-gonic/gin\"
)

func SearchCustomer(c *gin.Context, search *dto.CustomerSearch) (*astina.Customer, *exceptions.ErrorResponse) {

	requestId := c.MustGet(\"RequestId\").(string)

	logger.Info(searchCustomerLogTag, fmt.Sprintf(\"request received to search customer: %s\", requestId))

	searchCustomerError := &exceptions.ErrorResponse{}

	searchCustomer := &astina.SearchCustomerByPhoneRequest{
		Phone:  search.Phone,
		Method: method,
	}

	customer, err := astina.SearchCustomerByPhone(searchCustomer, requestId)

	if nil != err {
		return nil, exceptions.TransformSDKErrorToKYCError(err)
	}

	if customer == nil {
		logger.Info(searchCustomerLogTag, \"No customer found for given phone number\")
		searchCustomerError.Build(exceptions.NoCustomerFoundErrorCode)
		return nil, searchCustomerError
	}

	logger.Info(searchCustomerLogTag, \"received customer details\", customer)

	// do not send data for blocked customer
	otpKey := otpRedisKey + customer.OvoID
	isValidCustomerSession, customerSessionErr := otp.IsValidSession(requestId, config.Config.OtpConfig, otpKey)
	if isValidCustomerSession == otp.InvalidSession {
		return nil, customerSessionErr
	}

	accountVerificationErr := utils.VerifyAccountStatus(customer.SavingAccount)

	if accountVerificationErr != nil {
		return nil, accountVerificationErr
	}

	// get KTP, NPWP, Sign, Selfie images from falcon
	customer.KTPImageBase64, _ = getImage(requestId, customer.OvoID, KTPDocumentType)
	customer.NPWPImageBase64, _ = getImage(requestId, customer.OvoID, NPWPDocumentType)
	customer.SignatureImageBase64, _ = getImage(requestId, customer.OvoID, SignatureDocumentType)
	customer.SelfieImageBase64, _ = getImage(requestId, customer.OvoID, SelfieDocumentType)

	customerCache := new(utils.AstinaCache).
		SetOvoId(customer.OvoID).
		SetMobile(customer.MobilePhoneNumber).
		SetEmailIds(customer.Emails).
		SetSavingsAccount(customer.SavingAccount).
		SetUserLevel(customer.UserLevel" . 30) (t 23301 17014 892041 832000)) nil (23303 41990 460460 0) 0 nil]) ((30 . 2252) ("bitbucket.org/kyc-agent/common/logger\"
	\"bitbucket.org/kyc-agent/config\"
	\"bitbucket.org/kyc-agent/dto\"
	\"bitbucket.org/kyc-agent/exceptions\"
	\"bitbucket.org/kyc-agent/external/astina\"
	\"bitbucket.org/kyc-agent/logic/customer/utils\"
	\"bitbucket.org/kyc-agent/logic/otp\"
	\"fmt\"
	\"github.com/gin-gonic/gin\"
)

func SearchCustomer(c *gin.Context, search *dto.CustomerSearch) (*astina.Customer, *exceptions.ErrorResponse) {

	requestId := c.MustGet(\"RequestId\").(string)

	logger.Info(searchCustomerLogTag, fmt.Sprint(\"request received to search customer: %s\", requestId))

	searchCustomerError := &exceptions.ErrorResponse{}

	searchCustomer := &astina.SearchCustomerByPhoneRequest{
		Phone:  search.Phone,
		Method: method,
	}

	customer, err := astina.SearchCustomerByPhone(searchCustomer, requestId)

	if nil != err {
		return nil, exceptions.TransformSDKErrorToKYCError(err)
	}

	if customer == nil {
		logger.Info(searchCustomerLogTag, \"No customer found for given phone number\")
		searchCustomerError.Build(exceptions.NoCustomerFoundErrorCode)
		return nil, searchCustomerError
	}

	logger.Info(searchCustomerLogTag, \"received customer details\", customer)

	// do not send data for blocked customer
	otpKey := otpRedisKey + customer.OvoID
	isValidCustomerSession, customerSessionErr := otp.IsValidSession(requestId, config.Config.OtpConfig, otpKey)
	if isValidCustomerSession == otp.InvalidSession {
		return nil, customerSessionErr
	}

	accountVerificationErr := utils.VerifyAccountStatus(customer.SavingAccount)

	if accountVerificationErr != nil {
		return nil, accountVerificationErr
	}

	// get KTP, NPWP, Sign, Selfie images from falcon
	customer.KTPImageBase64, _ = getImage(requestId, customer.OvoID, KTPDocumentType)
	customer.NPWPImageBase64, _ = getImage(requestId, customer.OvoID, NPWPDocumentType)
	customer.SignatureImageBase64, _ = getImage(requestId, customer.OvoID, SignatureDocumentType)
	customer.SelfieImageBase64, _ = getImage(requestId, customer.OvoID, SelfieDocumentType)

	customerCache := new(utils.AstinaCache).
		SetOvoId(customer.OvoID).
		SetMobile(customer.MobilePhoneNumber).
		SetEmailIds(customer.Emails).
		SetSavingsAccount(customer.SavingAccount" . 30) (t 23301 16945 141641 20000)) nil (23303 41990 460466 0) 0 nil]) ((30 . 2214) (#("fmt\"

	\"bitbucket.org/kyc-agent/common/logger\"
	\"bitbucket.org/kyc-agent/config\"
	\"bitbucket.org/kyc-agent/dto\"
	\"bitbucket.org/kyc-agent/exceptions\"
	\"bitbucket.org/kyc-agent/external/astina\"
	\"bitbucket.org/kyc-agent/logic/customer/utils\"
	\"bitbucket.org/kyc-agent/logic/otp\"
	\"github.com/gin-gonic/gin\"
)

func SearchCustomer(c *gin.Context, search *dto.CustomerSearch) (*astina.Customer, *exceptions.ErrorResponse) {

	requestId := c.MustGet(\"RequestId\").(string)

	logger.Info(searchCustomerLogTag, fmt.Sprintf(\"request received to search customer: %s\", requestId))

	searchCustomerError := &exceptions.ErrorResponse{}

	searchCustomer := &astina.SearchCustomerByPhoneRequest{
		Phone:  search.Phone,
		Method: method,
	}

	customer, err := astina.SearchCustomerByPhone(searchCustomer, requestId)

	if nil != err {
		return nil, exceptions.TransformSDKErrorToKYCError(err)
	}

	if customer == nil {
		logger.Info(searchCustomerLogTag, \"No customer found for given phone number\")
		searchCustomerError.Build(exceptions.NoCustomerFoundErrorCode)
		return nil, searchCustomerError
	}

	logger.Info(searchCustomerLogTag, \"received customer details\", customer)

	// do not send data for blocked customer
	otpKey := otpRedisKey + customer.OvoID
	isValidCustomerSession, customerSessionErr := otp.IsValidSession(requestId, config.Config.OtpConfig, otpKey)
	if isValidCustomerSession == otp.InvalidSession {
		return nil, customerSessionErr
	}

	accountVerificationErr := utils.VerifyAccountStatus(customer.SavingAccount)

	if accountVerificationErr != nil {
		return nil, accountVerificationErr
	}

	// get KTP, NPWP, Sign, Selfie images from falcon
	customer.KTPImageBase64, _ = getImage(requestId, customer.OvoID, KTPDocumentType)
	customer.NPWPImageBase64, _ = getImage(requestId, customer.OvoID, NPWPDocumentType)
	customer.SignatureImageBase64, _ = getImage(requestId, customer.OvoID, SignatureDocumentType)
	customer.SelfieImageBase64, _ = getImage(requestId, customer.OvoID, SelfieDocumentType)

	customerCache := new(utils.AstinaCache).
		SetOvoId(customer.OvoID).
		SetMobile(customer.MobilePhoneNumber).
		SetEmailIds(customer.Emails).
		SetSavingsAccount(customer.SavingAccount).
		SetUserLevel(customer.UserLevel" 0 4 (fontified t face font-lock-string-face) 4 6 (fontified t) 6 7 (fontified t face whitespace-tab) 7 46 (fontified t face font-lock-string-face) 46 47 (fontified t) 47 48 (fontified t face whitespace-tab) 48 80 (fontified t face font-lock-string-face) 80 81 (fontified t) 81 82 (fontified t face whitespace-tab) 82 111 (fontified t face font-lock-string-face) 111 112 (fontified t) 112 113 (fontified t face whitespace-tab) 113 149 (fontified t face font-lock-string-face) 149 150 (fontified t) 150 151 (fontified t face whitespace-tab) 151 192 (fontified t face font-lock-string-face) 192 193 (fontified t) 193 194 (fontified t face whitespace-tab) 194 240 (fontified t face font-lock-string-face) 240 241 (fontified t) 241 242 (fontified t face whitespace-tab) 242 277 (fontified t face font-lock-string-face) 277 278 (fontified t) 278 279 (fontified t face whitespace-tab) 279 305 (fontified t face font-lock-string-face) 305 309 (fontified t) 309 313 (fontified t face font-lock-keyword-face) 313 314 (fontified t) 314 328 (fontified t face font-lock-function-name-face) 328 332 (fontified t) 332 343 (fontified t face font-lock-type-face) 343 353 (fontified t) 353 371 (fontified t face font-lock-type-face) 371 375 (fontified t) 375 389 (fontified t face font-lock-type-face) 389 390 (fontified t face (-1 font-lock-type-face)) 390 393 (fontified t face (-1)) 393 417 (fontified t face (-1 font-lock-type-face)) 417 420 (fontified t face (-1)) 420 422 (fontified t) 422 423 (fontified t face whitespace-tab) 423 438 (fontified t) 438 445 (fontified t face font-lock-function-name-face) 445 446 (fontified t) 446 457 (fontified t face font-lock-string-face) 457 460 (fontified t) 460 466 (fontified t face font-lock-type-face) 466 469 (fontified t) 469 470 (fontified t face whitespace-tab) 470 477 (fontified t) 477 481 (fontified t face font-lock-function-name-face) 481 498 (fontified t) 498 508 (fontified t) 508 515 (face font-lock-function-name-face fontified t) 515 516 (fontified t) 516 546 (face font-lock-string-face fontified t) 546 557 (face (-1 font-lock-string-face) fontified t) 557 570 (face (-1) fontified t) 570 571 (fontified t) 571 572 (fontified t) 572 573 (fontified t face whitespace-tab) 573 608 (fontified t) 608 621 (fontified t face font-lock-type-face) 621 625 (fontified t) 625 626 (fontified t face whitespace-tab) 626 652 (fontified t) 652 680 (fontified t face font-lock-type-face) 680 682 (fontified t) 682 684 (fontified t face whitespace-tab) 684 689 (fontified t face font-lock-constant-face) 689 706 (fontified t) 706 708 (fontified t face whitespace-tab) 708 714 (fontified t face font-lock-constant-face) 714 724 (fontified t) 724 725 (fontified t face whitespace-tab) 725 728 (fontified t) 728 729 (fontified t face whitespace-tab) 729 753 (fontified t) 753 774 (fontified t face font-lock-function-name-face) 774 803 (fontified t) 803 804 (fontified t face whitespace-tab) 804 806 (fontified t face font-lock-keyword-face) 806 807 (fontified t) 807 810 (fontified t face font-lock-constant-face) 810 820 (fontified t) 820 822 (fontified t face whitespace-tab) 822 828 (fontified t face font-lock-keyword-face) 828 829 (fontified t) 829 832 (fontified t face font-lock-constant-face) 832 845 (fontified t) 845 872 (fontified t face font-lock-function-name-face) 872 878 (fontified t) 878 879 (fontified t face whitespace-tab) 879 882 (fontified t) 882 883 (fontified t face whitespace-tab) 883 885 (fontified t face font-lock-keyword-face) 885 898 (fontified t) 898 901 (fontified t face font-lock-constant-face) 901 904 (fontified t) 904 906 (fontified t face whitespace-tab) 906 913 (fontified t) 913 917 (fontified t face font-lock-function-name-face) 917 940 (fontified t) 940 978 (fontified t face font-lock-string-face) 978 982 (fontified t face (-1 font-lock-string-face)) 982 983 (fontified t face (-1)) 983 984 (fontified t) 984 986 (fontified t face whitespace-tab) 986 1006 (fontified t) 1006 1011 (fontified t face font-lock-function-name-face) 1011 1049 (fontified t) 1049 1051 (fontified t face whitespace-tab) 1051 1057 (fontified t face font-lock-keyword-face) 1057 1058 (fontified t) 1058 1061 (fontified t face font-lock-constant-face) 1061 1071 (fontified t) 1071 1083 (fontified t) 1083 1084 (fontified t face whitespace-tab) 1084 1087 (fontified t) 1087 1088 (fontified t face whitespace-tab) 1088 1095 (fontified t) 1095 1099 (fontified t face font-lock-function-name-face) 1099 1122 (fontified t) 1122 1149 (fontified t face font-lock-string-face) 1149 1162 (fontified t) 1162 1163 (fontified t face whitespace-tab) 1163 1166 (fontified t face font-lock-comment-delimiter-face) 1166 1204 (fontified t face font-lock-comment-face) 1204 1205 (fontified t face whitespace-tab) 1205 1244 (fontified t) 1244 1245 (fontified t face whitespace-tab) 1245 1295 (fontified t) 1295 1309 (fontified t face font-lock-function-name-face) 1309 1321 (fontified t) 1321 1353 (fontified t face (-1)) 1353 1354 (fontified t) 1354 1355 (fontified t face whitespace-tab) 1355 1357 (fontified t face font-lock-keyword-face) 1357 1405 (fontified t) 1405 1407 (fontified t face whitespace-tab) 1407 1413 (fontified t face font-lock-keyword-face) 1413 1414 (fontified t) 1414 1417 (fontified t face font-lock-constant-face) 1417 1438 (fontified t) 1438 1439 (fontified t face whitespace-tab) 1439 1442 (fontified t) 1442 1443 (fontified t face whitespace-tab) 1443 1475 (fontified t) 1475 1494 (fontified t face font-lock-function-name-face) 1494 1520 (fontified t) 1520 1521 (fontified t face whitespace-tab) 1521 1523 (fontified t face font-lock-keyword-face) 1523 1550 (fontified t) 1550 1553 (fontified t face font-lock-constant-face) 1553 1556 (fontified t) 1556 1558 (fontified t face whitespace-tab) 1558 1564 (fontified t face font-lock-keyword-face) 1564 1565 (fontified t) 1565 1568 (fontified t face font-lock-constant-face) 1568 1583 (fontified t) 1583 1593 (fontified t)) . 30) (t 23299 37479 400013 110000)) nil (23303 41990 460469 0) 0 nil]) ((30 . 2252) (#("bitbucket.org/kyc-agent/common/logger\"
	\"bitbucket.org/kyc-agent/config\"
	\"bitbucket.org/kyc-agent/dto\"
	\"bitbucket.org/kyc-agent/exceptions\"
	\"bitbucket.org/kyc-agent/external/astina\"
	\"bitbucket.org/kyc-agent/logic/customer/utils\"
	\"bitbucket.org/kyc-agent/logic/otp\"
	\"fmt\"
	\"github.com/gin-gonic/gin\"
)

func SearchCustomer(c *gin.Context, search *dto.CustomerSearch) (*astina.Customer, *exceptions.ErrorResponse) {

	requestId := c.MustGet(\"RequestId\").(string)

	logger.Info(searchCustomerLogTag, fmt.Sprint(\"request received to search customer: %s\", requestId))

	searchCustomerError := &exceptions.ErrorResponse{}

	searchCustomer := &astina.SearchCustomerByPhoneRequest{
		Phone:  search.Phone,
		Method: method,
	}

	customer, err := astina.SearchCustomerByPhone(searchCustomer, requestId)

	if nil != err {
		return nil, exceptions.TransformSDKErrorToKYCError(err)
	}

	if customer == nil {
		logger.Info(searchCustomerLogTag, \"No customer found for given phone number\")
		searchCustomerError.Build(exceptions.NoCustomerFoundErrorCode)
		return nil, searchCustomerError
	}

	logger.Info(searchCustomerLogTag, \"received customer details\", customer)

	// do not send data for blocked customer
	otpKey := otpRedisKey + customer.OvoID
	isValidCustomerSession, customerSessionErr := otp.IsValidSession(requestId, config.Config.OtpConfig, otpKey)
	if isValidCustomerSession == otp.InvalidSession {
		return nil, customerSessionErr
	}

	accountVerificationErr := utils.VerifyAccountStatus(customer.SavingAccount)

	if accountVerificationErr != nil {
		return nil, accountVerificationErr
	}

	// get KTP, NPWP, Sign, Selfie images from falcon
	customer.KTPImageBase64, _ = getImage(requestId, customer.OvoID, KTPDocumentType)
	customer.NPWPImageBase64, _ = getImage(requestId, customer.OvoID, NPWPDocumentType)
	customer.SignatureImageBase64, _ = getImage(requestId, customer.OvoID, SignatureDocumentType)
	customer.SelfieImageBase64, _ = getImage(requestId, customer.OvoID, SelfieDocumentType)

	customerCache := new(utils.AstinaCache).
		SetOvoId(customer.OvoID).
		SetMobile(customer.MobilePhoneNumber).
		SetEmailIds(customer.Emails).
		SetSavingsAccount(customer.SavingAccount" 0 2184 (fontified nil)) . 30) (t 23299 37343 647697 392000)) nil (23303 41990 460472 0) 0 nil]) ((30 . 2214) (#("fmt\"

	\"bitbucket.org/kyc-agent/common/logger\"
	\"bitbucket.org/kyc-agent/config\"
	\"bitbucket.org/kyc-agent/dto\"
	\"bitbucket.org/kyc-agent/exceptions\"
	\"bitbucket.org/kyc-agent/external/astina\"
	\"bitbucket.org/kyc-agent/logic/customer/utils\"
	\"bitbucket.org/kyc-agent/logic/otp\"
	\"github.com/gin-gonic/gin\"
)

func SearchCustomer(c *gin.Context, search *dto.CustomerSearch) (*astina.Customer, *exceptions.ErrorResponse) {

	requestId := c.MustGet(\"RequestId\").(string)

	logger.Info(searchCustomerLogTag, fmt.Sprintf(\"request received to search customer: %s\", requestId))

	searchCustomerError := &exceptions.ErrorResponse{}

	searchCustomer := &astina.SearchCustomerByPhoneRequest{
		Phone:  search.Phone,
		Method: method,
	}

	customer, err := astina.SearchCustomerByPhone(searchCustomer, requestId)

	if nil != err {
		return nil, exceptions.TransformSDKErrorToKYCError(err)
	}

	if customer == nil {
		logger.Info(searchCustomerLogTag, \"No customer found for given phone number\")
		searchCustomerError.Build(exceptions.NoCustomerFoundErrorCode)
		return nil, searchCustomerError
	}

	logger.Info(searchCustomerLogTag, \"received customer details\", customer)

	// do not send data for blocked customer
	otpKey := otpRedisKey + customer.OvoID
	isValidCustomerSession, customerSessionErr := otp.IsValidSession(requestId, config.Config.OtpConfig, otpKey)
	if isValidCustomerSession == otp.InvalidSession {
		return nil, customerSessionErr
	}

	accountVerificationErr := utils.VerifyAccountStatus(customer.SavingAccount)

	if accountVerificationErr != nil {
		return nil, accountVerificationErr
	}

	// get KTP, NPWP, Sign, Selfie images from falcon
	customer.KTPImageBase64, _ = getImage(requestId, customer.OvoID, KTPDocumentType)
	customer.NPWPImageBase64, _ = getImage(requestId, customer.OvoID, NPWPDocumentType)
	customer.SignatureImageBase64, _ = getImage(requestId, customer.OvoID, SignatureDocumentType)
	customer.SelfieImageBase64, _ = getImage(requestId, customer.OvoID, SelfieDocumentType)

	customerCache := new(utils.AstinaCache).
		SetOvoId(customer.OvoID).
		SetMobile(customer.MobilePhoneNumber).
		SetEmailIds(customer.Emails).
		SetSavingsAccount(customer.SavingAccount).
		SetUserLevel(customer.UserLevel" 0 4 (fontified t face font-lock-string-face) 4 6 (fontified t) 6 7 (fontified t face whitespace-tab) 7 46 (fontified t face font-lock-string-face) 46 47 (fontified t) 47 48 (fontified t face whitespace-tab) 48 80 (fontified t face font-lock-string-face) 80 81 (fontified t) 81 82 (fontified t face whitespace-tab) 82 111 (fontified t face font-lock-string-face) 111 112 (fontified t) 112 113 (fontified t face whitespace-tab) 113 149 (fontified t face font-lock-string-face) 149 150 (fontified t) 150 151 (fontified t face whitespace-tab) 151 192 (fontified t face font-lock-string-face) 192 193 (fontified t) 193 194 (fontified t face whitespace-tab) 194 240 (fontified t face font-lock-string-face) 240 241 (fontified t) 241 242 (fontified t face whitespace-tab) 242 277 (fontified t face font-lock-string-face) 277 278 (fontified t) 278 279 (fontified t face whitespace-tab) 279 305 (fontified t face font-lock-string-face) 305 309 (fontified t) 309 313 (fontified t face font-lock-keyword-face) 313 314 (fontified t) 314 328 (fontified t face font-lock-function-name-face) 328 332 (fontified t) 332 343 (fontified t face font-lock-type-face) 343 353 (fontified t) 353 371 (fontified t face font-lock-type-face) 371 375 (fontified t) 375 389 (fontified t face font-lock-type-face) 389 390 (fontified t face (-1 font-lock-type-face)) 390 393 (fontified t face (-1)) 393 417 (fontified t face (-1 font-lock-type-face)) 417 420 (fontified t face (-1)) 420 422 (fontified t) 422 423 (fontified t face whitespace-tab) 423 438 (fontified t) 438 445 (fontified t face font-lock-function-name-face) 445 446 (fontified t) 446 457 (fontified t face font-lock-string-face) 457 460 (fontified t) 460 466 (fontified t face font-lock-type-face) 466 469 (fontified t) 469 470 (fontified t face whitespace-tab) 470 471 (fontified t) 471 477 (fontified t) 477 481 (fontified t face font-lock-function-name-face) 481 508 (fontified t) 508 515 (fontified t face font-lock-function-name-face) 515 516 (fontified t) 516 546 (fontified t face font-lock-string-face) 546 557 (fontified t face (-1 font-lock-string-face)) 557 570 (fontified t face (-1)) 570 571 (fontified t) 571 572 (fontified t) 572 573 (fontified t face whitespace-tab) 573 608 (fontified t) 608 621 (fontified t face font-lock-type-face) 621 625 (fontified t) 625 626 (fontified t face whitespace-tab) 626 652 (fontified t) 652 680 (fontified t face font-lock-type-face) 680 682 (fontified t) 682 684 (fontified t face whitespace-tab) 684 689 (fontified t face font-lock-constant-face) 689 706 (fontified t) 706 708 (fontified t face whitespace-tab) 708 714 (fontified t face font-lock-constant-face) 714 724 (fontified t) 724 725 (fontified t face whitespace-tab) 725 728 (fontified t) 728 729 (fontified t face whitespace-tab) 729 753 (fontified t) 753 774 (fontified t face font-lock-function-name-face) 774 803 (fontified t) 803 804 (fontified t face whitespace-tab) 804 806 (fontified t face font-lock-keyword-face) 806 807 (fontified t) 807 810 (fontified t face font-lock-constant-face) 810 820 (fontified t) 820 822 (fontified t face whitespace-tab) 822 828 (fontified t face font-lock-keyword-face) 828 829 (fontified t) 829 832 (fontified t face font-lock-constant-face) 832 845 (fontified t) 845 872 (fontified t face font-lock-function-name-face) 872 878 (fontified t) 878 879 (fontified t face whitespace-tab) 879 882 (fontified t) 882 883 (fontified t face whitespace-tab) 883 885 (fontified t face font-lock-keyword-face) 885 898 (fontified t) 898 901 (fontified t face font-lock-constant-face) 901 904 (fontified t) 904 906 (fontified t face whitespace-tab) 906 913 (fontified t) 913 917 (fontified t face font-lock-function-name-face) 917 940 (fontified t) 940 978 (fontified t face font-lock-string-face) 978 982 (fontified t face (-1 font-lock-string-face)) 982 983 (fontified t face (-1)) 983 984 (fontified t) 984 986 (fontified t face whitespace-tab) 986 1006 (fontified t) 1006 1011 (fontified t face font-lock-function-name-face) 1011 1049 (fontified t) 1049 1051 (fontified t face whitespace-tab) 1051 1057 (fontified t face font-lock-keyword-face) 1057 1058 (fontified t) 1058 1061 (fontified t face font-lock-constant-face) 1061 1071 (fontified t) 1071 1083 (fontified t) 1083 1084 (fontified t face whitespace-tab) 1084 1087 (fontified t) 1087 1088 (fontified t face whitespace-tab) 1088 1095 (fontified t) 1095 1099 (fontified t face font-lock-function-name-face) 1099 1122 (fontified t) 1122 1149 (fontified t face font-lock-string-face) 1149 1162 (fontified t) 1162 1163 (fontified t face whitespace-tab) 1163 1166 (fontified t face font-lock-comment-delimiter-face) 1166 1204 (fontified t face font-lock-comment-face) 1204 1205 (fontified t face whitespace-tab) 1205 1244 (fontified t) 1244 1245 (fontified t face whitespace-tab) 1245 1295 (fontified t) 1295 1309 (fontified t face font-lock-function-name-face) 1309 1321 (fontified t) 1321 1353 (fontified t face (-1)) 1353 1354 (fontified t) 1354 1355 (fontified t face whitespace-tab) 1355 1357 (fontified t face font-lock-keyword-face) 1357 1405 (fontified t) 1405 1407 (fontified t face whitespace-tab) 1407 1413 (fontified t face font-lock-keyword-face) 1413 1414 (fontified t) 1414 1417 (fontified t face font-lock-constant-face) 1417 1438 (fontified t) 1438 1439 (fontified t face whitespace-tab) 1439 1442 (fontified t) 1442 1443 (fontified t face whitespace-tab) 1443 1475 (fontified t) 1475 1494 (fontified t face font-lock-function-name-face) 1494 1520 (fontified t) 1520 1521 (fontified t face whitespace-tab) 1521 1523 (fontified t face font-lock-keyword-face) 1523 1550 (fontified t) 1550 1553 (fontified t face font-lock-constant-face) 1553 1556 (fontified t) 1556 1558 (fontified t face whitespace-tab) 1558 1564 (fontified t face font-lock-keyword-face) 1564 1565 (fontified t) 1565 1568 (fontified t face font-lock-constant-face) 1568 1583 (fontified t) 1583 1593 (fontified t) 1593 1594 (fontified t face whitespace-tab) 1594 1597 (fontified t) 1597 1598 (fontified t face whitespace-tab) 1598 1601 (fontified t face font-lock-comment-delimiter-face) 1601 1648 (fontified t face font-lock-comment-face) 1648 1649 (fontified t face whitespace-tab) 1649 1678 (fontified t) 1678 1686 (fontified t face font-lock-function-name-face) 1686 1725 (fontified t) 1725 1730 (fontified t face (-1)) 1730 1731 (fontified t) 1731 1732 (fontified t face whitespace-tab) 1732 1762 (fontified t) 1762 1770 (fontified t face font-lock-function-name-face) 1770 1808 (fontified t) 1808 1815 (fontified t face (-1)) 1815 1816 (fontified t) 1816 1817 (fontified t face whitespace-tab) 1817 1852 (fontified t) 1852 1860 (fontified t face font-lock-function-name-face) 1860 1893 (fontified t) 1893 1910 (fontified t face (-1)) 1910 1911 (fontified t) 1911 1912 (fontified t face whitespace-tab) 1912 1944 (fontified t) 1944 1952 (fontified t face font-lock-function-name-face) 1952 1988 (fontified t) 1988 1999 (fontified t face (-1)) 1999 2001 (fontified t) 2001 2002 (fontified t face whitespace-tab) 2002 2019 (fontified t) 2019 2022 (fontified t face font-lock-builtin-face) 2022 2023 (fontified t) 2023 2040 (fontified t face font-lock-type-face) 2040 2043 (fontified t) 2043 2045 (fontified t face whitespace-tab) 2045 2053 (fontified t face font-lock-function-name-face) 2053 2071 (fontified t) 2071 2073 (fontified t face whitespace-tab) 2073 2082 (fontified t face font-lock-function-name-face) 2082 2093 (fontified t) 2093 2112 (fontified t) 2112 2114 (fontified t face whitespace-tab) 2114 2125 (fontified t face font-lock-function-name-face) 2125 2144 (fontified t) 2144 2146 (fontified t face whitespace-tab) 2146 2163 (fontified t face font-lock-function-name-face) 2163 2189 (fontified t) 2189 2191 (fontified t face whitespace-tab) 2191 2203 (fontified t face font-lock-function-name-face) 2203 2213 (fontified t) 2213 2222 (fontified t)) . 30) (undo-tree-id22 . -419) (undo-tree-id23 . -1593) (undo-tree-id24 . -419) (undo-tree-id25 . -2035) (undo-tree-id26 . -655) (undo-tree-id27 . -2031) (undo-tree-id28 . -2187) (undo-tree-id29 . -2204) (undo-tree-id30 . -2204) (undo-tree-id31 . -2204) (undo-tree-id32 . -2191) (undo-tree-id33 . -2204) (undo-tree-id34 . -2204) (undo-tree-id35 . -2191) (undo-tree-id36 . -2204) (t 23298 43859 152632 670000)) nil (23303 41990 460496 0) 0 nil] [nil nil ((2092 . 2093) (t 23298 43859 152632 670000)) ((#("s" 0 1 (fontified t)) . 2092) (undo-tree-id17 . -1) (undo-tree-id18 . -1)) (23298 44279 352397 0) 0 nil]) ((2243 . 2252) (#("Us" 0 2 (fontified t)) . -2243) (undo-tree-id9 . -2) 2245) nil (23298 44279 352694 0) 0 nil]) ((2243 . 2245)) nil (23298 43859 149791 0) 0 nil]) ((2234 . 2243)) nil (23298 43859 149804 0) 0 nil]) ((#("customer.UserLevel" 0 9 (fontified t) 9 18 (fontified t)) . -2234) (undo-tree-id10 . -9) (undo-tree-id11 . -9) (undo-tree-id12 . -9) (undo-tree-id13 . -9) (undo-tree-id14 . -8) (undo-tree-id15 . -18) (undo-tree-id16 . -18) 2252 (t 23298 43766 533739 112000)) nil (23298 43859 149821 0) 0 nil]) ((2243 . 2252) (#("Use" 0 3 (fontified t)) . -2243) (undo-tree-id0 . -3) (undo-tree-id1 . -3) 2246) nil (23298 43766 530072 0) 0 nil]) ((2234 . 2246) (2233 . 2235) (#("(" 0 1 (fontified nil)) . -2233) (2233 . 2234)) nil (23298 43766 530082 0) 0 nil]) ((2221 . 2233) (#("SetUs" 0 5 (fontified t)) . -2221) (undo-tree-id2 . -5) 2226) nil (23298 43766 530093 0) 0 nil]) ((2221 . 2226)) nil (23298 43766 530097 0) 0 nil]) ((2218 . 2221)) nil (23298 43766 530101 0) 0 nil]) ((2217 . 2218)) nil (23298 43766 530104 0) 0 nil]) ((#("
" 0 1 (fontified t)) . -2217) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 2218) nil (23298 43766 530116 0) 0 nil]) ((#("	." 0 1 (fontified t face whitespace-tab) 1 2 (fontified t)) . 2218) (undo-tree-id6 . -2) (undo-tree-id7 . -2) (undo-tree-id8 . -2)) nil (23298 43766 530122 0) 0 nil]) ((2219 . 2220)) nil (23298 43766 530124 0) 0 nil]) ((2217 . 2219) (t 23298 30910 205609 936000)) nil (23298 43766 530129 0) 0 nil]) nil nil (23298 43766 530130 0) 0 nil] #1# 14250 27 nil]